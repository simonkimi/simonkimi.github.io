<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows驱动5. WDF模型</title>
    <link href="/2024/11/19/Windows%E9%A9%B1%E5%8A%A85-WDF%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/11/19/Windows%E9%A9%B1%E5%8A%A85-WDF%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"></div></body></html>]]></content>
    
    
    <categories>
      
      <category>驱动</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驱动</tag>
      
      <tag>Windows</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学1. 线性代数</title>
    <link href="/2024/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A61-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <url>/2024/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A61-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_计算机图形学1_线性代数">计算机图形学1. 线性代数</h2><div class="sectionbody"><div class="sect2"><h3 id="_1_点乘">1.点乘</h3><div class="paragraph"><p>在2D平面中, 给予两个向量 \(\vec&#123;a&#125;\) 和 \(\vec&#123;b&#125;\) , 点乘的结果是一个值</p></div><div class="stemblock"><div class="content">\[\vec&#123;a&#125; \cdot \vec&#123;b&#125; = \left( \begin&#123;array&#125;&#123;c&#125; a_x \\ a_y \end&#123;array&#125; \right) \cdot \left( \begin&#123;array&#125;&#123;c&#125; b_x \\ b_y \end&#123;array&#125; \right) = a_x b_x + a_y b_y\]</div></div><div class="paragraph"><p>在3D空间中, 给予两个向量 \(\vec&#123;a&#125;\) 和 \(\vec&#123;b&#125;\)</p></div><div class="stemblock"><div class="content">\[\vec&#123;a&#125; \cdot \vec&#123;b&#125; = \left( \begin&#123;array&#125;&#123;c&#125; a_x \\ a_y \\ a_z \end&#123;array&#125; \right) \cdot \left( \begin&#123;array&#125;&#123;c&#125; b_x \\ b_y \\ b_z \end&#123;array&#125; \right) = a_x b_x + a_y b_y + a_z b_z\]</div></div></div><div class="sect2"><h3 id="_2_叉乘">2.叉乘</h3><div class="paragraph"><p>给与两个向量 \(\vec&#123;x&#125;\) 和 \(\vec&#123;y&#125;\), 叉乘的结果是一个向量, 其方向垂直于两个向量所在的平面, 大小为两个向量构成的平行四边形的面积</p></div><div class="paragraph"><p>常见于三维空间内, 给与两个轴向量𝑖⃗和𝑗⃗, 计算出另一个向量</p></div><div class="stemblock"><div class="content">\[\begin&#123;align&#125;\vec&#123;x&#125; \times \vec&#123;y&#125; &amp;= +\vec&#123;z&#125; \\\vec&#123;y&#125; \times \vec&#123;x&#125; &amp;= -\vec&#123;z&#125; \\\vec&#123;y&#125; \times \vec&#123;z&#125; &amp;= +\vec&#123;x&#125; \\\vec&#123;z&#125; \times \vec&#123;y&#125; &amp;= -\vec&#123;x&#125; \\\vec&#123;z&#125; \times \vec&#123;x&#125; &amp;= +\vec&#123;y&#125; \\\vec&#123;x&#125; \times \vec&#123;z&#125; &amp;= -\vec&#123;y&#125; \\\end&#123;align&#125;\]</div></div><div class="paragraph"><p>叉乘可以用来判断一个向量在另一个向量的左边还是右边, 以及两个向量的夹角<br>例如, 两个向量𝑎⃗和𝑏⃗, 如果𝑎⃗叉乘𝑏⃗的结果是正的, 那么𝑎⃗在𝑏⃗的左边, 如果是负的, 那么在右边</p></div></div><div class="sect2"><h3 id="_3_矩阵">3. 矩阵</h3><div class="paragraph"><p>矩阵的乘法, 必须满足 \( (M \times N) (N \times P) = (M \times P) \)</p></div><div class="paragraph"><p>结果的第 \(i\) 行第 \(j\) 列的元素是第一个矩阵的第 \(i\) 行的元素与第二个矩阵的第 \(j\) 列的元素的点乘</p></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学2. 变换</title>
    <link href="/2024/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A62-%E5%8F%98%E6%8D%A2/"/>
    <url>/2024/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A62-%E5%8F%98%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_计算机图形学2_变换">计算机图形学2. 变换</h2><div class="sectionbody"><div class="sect2"><h3 id="_1_缩放">1. 缩放</h3><div class="stemblock"><div class="content">\[x' = s_xx \\y' = s_yy\]</div></div><div class="paragraph"><p>写作矩阵形式</p></div><div class="stemblock"><div class="content">\[\begin&#123;bmatrix&#125;x' \\y'\end&#123;bmatrix&#125;=\begin&#123;bmatrix&#125;s_x &amp; 0 \\0 &amp; s_y\end&#123;bmatrix&#125;\begin&#123;bmatrix&#125;x \\y\end&#123;bmatrix&#125;\]</div></div></div><div class="sect2"><h3 id="_2_旋转">2. 旋转</h3><div class="imageblock text-center"><div class="content"><img src="image-2024-08-22-14-17-38-992.png" alt="image 2024 08 22 14 17 38 992"></div></div><div class="stemblock"><div class="content">\[x' = xcos\theta - ysin\theta \\y' = xsin\theta + ycos\theta\]</div></div><div class="paragraph"><p>写作矩阵形式</p></div><div class="stemblock"><div class="content">\[R_&#123;\theta&#125; =\begin&#123;bmatrix&#125;cos \theta &amp; -sin \theta \\sin \theta &amp; cos \theta\end&#123;bmatrix&#125;\]</div></div></div><div class="sect2"><h3 id="_3_平移">3. 平移</h3><div class="stemblock"><div class="content">\[x' = x + t_x \\y' = y + t_y\]</div></div><div class="paragraph"><p>写作矩阵形式, 需要引入齐次坐标</p></div><div class="stemblock"><div class="content">\[\begin&#123;bmatrix&#125;x' \\y' \\1\end&#123;bmatrix&#125;=\begin&#123;bmatrix&#125;1 &amp; 0 &amp; t_x \\0 &amp; 1 &amp; t_y \\0 &amp; 0 &amp; 1\end&#123;bmatrix&#125;\begin&#123;bmatrix&#125;x \\y \\1\end&#123;bmatrix&#125;\]</div></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决vcpkg无法找到Visual Studio问题</title>
    <link href="/2024/08/14/%E8%A7%A3%E5%86%B3vcpkg%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0Visual-Studio%E9%97%AE%E9%A2%98/"/>
    <url>/2024/08/14/%E8%A7%A3%E5%86%B3vcpkg%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0Visual-Studio%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_解决vcpkg无法找到visual_studio问题">解决vcpkg无法找到Visual Studio问题</h2><div class="sectionbody"><div class="olist arabic"><ol class="arabic"><li><p>安装Visual Studio 2022英文包</p><div class="literalblock"><div class="content"><pre>参考链接: https://github.com/microsoft/vcpkg/issues/22074#issuecomment-1007383829</pre></div></div></li><li><p>重置vcpkg</p><div class="literalblock"><div class="content"><pre>参考链接: https://github.com/microsoft/vcpkg/issues/22074#issuecomment-2139444395</pre></div></div></li></ol></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学1. 三维空间矩阵变换</title>
    <link href="/2024/08/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A61-%E7%9F%A9%E9%98%B5%E5%8F%98%E5%8C%96/"/>
    <url>/2024/08/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A61-%E7%9F%A9%E9%98%B5%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_计算机图形学1_矩阵变换">计算机图形学1. 矩阵变换</h2><div class="sectionbody"><div class="sect2"><h3 id="_平移变换">平移变换</h3><div class="stemblock"><div class="content">\[\left[\begin&#123;array&#125;&#123;c&#125;1 &amp;   &amp;   &amp; t_x\\  &amp; 1 &amp;   &amp; t_y\\  &amp;   &amp; 1 &amp; t_z\\  &amp;   &amp;   &amp; 1\\\end&#123;array&#125;\right]\left[\begin&#123;array&#125;&#123;c&#125;x \\y \\z \\1\end&#123;array&#125;\right]=\left[\begin&#123;array&#125;&#123;c&#125;x + t_x \\y + t_y \\z + t_z \\1\end&#123;array&#125;\right]\]</div></div></div><div class="sect2"><h3 id="_旋转变换">旋转变换</h3><div class="stemblock"><div class="content">\[\left[\begin&#123;array&#125;&#123;c&#125;cos\theta &amp; -sin\theta &amp; 0 &amp; 0\\sin\theta &amp; cos\theta &amp; 0 &amp; 0\\0 &amp; 0 &amp; 1 &amp; 0\\0 &amp; 0 &amp; 0 &amp; 1\\\end&#123;array&#125;\right]\left[\begin&#123;array&#125;&#123;c&#125;x \\y \\z \\1\end&#123;array&#125;\right]=\left[\begin&#123;array&#125;&#123;c&#125;x\cos\theta - y\sin\theta \\x\sin\theta + y\cos\theta \\z \\1\end&#123;array&#125;\right]\]</div></div></div><div class="sect2"><h3 id="_缩放变换">缩放变换</h3><div class="stemblock"><div class="content">\[\left[\begin&#123;array&#125;&#123;c&#125;s_x &amp;  &amp;  &amp; 0\\  &amp; s_y &amp;  &amp; 0\\  &amp;  &amp; s_z &amp; 0\\  &amp;  &amp;  &amp; 1\\\end&#123;array&#125;\right]\left[\begin&#123;array&#125;&#123;c&#125;x \\y \\z \\1\end&#123;array&#125;\right]=\left[\begin&#123;array&#125;&#123;c&#125;s_xx \\s_yy \\s_zz \\1\end&#123;array&#125;\right]\]</div></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>矩阵</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用VsCode开发Windows驱动</title>
    <link href="/2024/08/12/%E4%BD%BF%E7%94%A8VsCode%E5%BC%80%E5%8F%91Windows%E9%A9%B1%E5%8A%A8/"/>
    <url>/2024/08/12/%E4%BD%BF%E7%94%A8VsCode%E5%BC%80%E5%8F%91Windows%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_使用vscode开发windows驱动">使用VsCode开发Windows驱动</h2><div class="sectionbody"><div class="paragraph"><p><code>xmake.lua</code></p></div><div class="listingblock"><div class="content"><figure class="highlight lua"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">add_rules(<span class="hljs-string">"mode.debug"</span>, <span class="hljs-string">"mode.release"</span>)<br><br>target(<span class="hljs-string">"xmake_wdm_test"</span>)<br><span class="hljs-keyword">do</span><br>    add_rules(<span class="hljs-string">"wdk.driver"</span>, <span class="hljs-string">"wdk.env.wdm"</span>)<br>    add_values(<span class="hljs-string">"wdk.tracewpp.flags"</span>, <span class="hljs-string">"-func:TracePrint((LEVEL,FLAGS,MSG,...))"</span>)<br>    add_files(<span class="hljs-string">"/src/*.cpp"</span>, &#123; rule = <span class="hljs-string">"wdk.tracewpp"</span> &#125;)<br>    add_files(<span class="hljs-string">"*.rc"</span>, <span class="hljs-string">"*.inf"</span>)<br>    add_files(<span class="hljs-string">"*.mof|msdsm.mof"</span>)<br>    add_files(<span class="hljs-string">"msdsm.mof"</span>, &#123; values = &#123; wdk_mof_header = <span class="hljs-string">"msdsmwmi.h"</span> &#125; &#125;)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p><code>c_cpp_properties.json</code></p></div><div class="listingblock"><div class="content"><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">"compileCommands"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"$&#123;workspaceFolder&#125;/.vscode/compile_commands.json"</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p><code>main.cpp</code></p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span></span><br><br><span class="hljs-function">VOID <span class="hljs-title">DriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT pDriverObject)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">KdPrint</span>((<span class="hljs-string">"Driver Unload\n"</span>));<br>&#125;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">"C"</span> <span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING pRegistryPath)</span></span><br><span class="hljs-function"></span>&#123;<br>    pDriverObject-&gt;DriverUnload = DriverUnload;<br>    <span class="hljs-built_in">KdPrint</span>((<span class="hljs-string">"Driver Entry\n"</span>));<br>    <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div></div></div></div></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>驱动</tag>
      
      <tag>Windows</tag>
      
      <tag>xmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏逆向1. 寻找基值</title>
    <link href="/2024/08/04/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%911-%E5%AF%BB%E6%89%BE%E5%9F%BA%E5%80%BC/"/>
    <url>/2024/08/04/%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%911-%E5%AF%BB%E6%89%BE%E5%9F%BA%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重新输入" data-whm="密码错误, 请重新输入">  <script id="hbeData" type="hbeData" data-hmacdigest="603e1b22896d90663937c7bc68773a5bde7a8d655d812a2bbc2cb1a3987ee672">3b27ec43f3e0933cc32d4e2ca9f679c530b47631807558276d75f9a7f9b9b1f636d8ed68ad1e16ae7dbfc96c66042440354604872cfcfa38598f352e58bddf60d2187e6b527dfdfb1b1db9e3193d379254c4f9bcecd1a1092b233e2472891cc9372449e723ef4500eae3d08c2e64f9e63f3a789c545e0bf05029a0f6e90e80553a172a0afbe908673e9f5c68be596cd1541ca078f19ec1fbe2682e9c407ea57a0690328871908d45e88fb1b639948f6e8a387902e2cf96dbbfa8964e651e1067b2acae7c733d363c91b78b6533fd89600a80d62e2d7d4301c4722dcedc55a028b1d92ba46922f5d0fb53bd18ad5d26c9e58b45d30b039434ba3c8aa422cf62b9ae3c621940262e80e37bceba583ce2fe5d19a28779ee78fc22282f7d6eb27359733df33ffd578642d400a8921ba54acedc35f9e4c1b88901efc693d68269c6983a208004a5693b7998ff73d775bf240127c23a2c6e0ddcbaf75f75ddd71439ecd740791467a4620adc9fa9f64076122bcfe0a7c4bb8dafc92a80b826b80a1f6669c3172470e92e802b61a1d462583c85ec9fa8a82fabb62098e3503accceb62c12f2de0783765df091a27f5f6f5a4d17a40f03108e5b7ff98aaad7bcf7994fa99dd99349c3b050231c39900a6dd245629df340beaf805d1cd636b7bce12f8b8f6b2c535cbce6924c43a716d552a3fca0fa5677a447213c0f479d6058bf9a9fb5711c811a25bc4e67d9168e44c18742dfb4950a780f85228b3a76fe22ac23da04c62650ade6686ac25a455249019ea7ebe834fce14a2645a3688fff899db320744f684475b2f6c1f23051f904681868071cc9ea01a26a49602fbdf26ce5fec3467150e9292aec488f348af99fc52b3b7b37a801805414c77c29b3a434ddab48b0bf93d7ac62d49d6efb577e609393467a79912cfabc52672f589962577de7c7a05378568fa0dbaf1f1fbd7cac285f84452a9078a68c0967272402cb201174046965ab910ecaedb1133c15c147c214c6f174ea180530b57e25dd72a5b0b123d6dca9e7331c916fd0728a9bef1017aaa2ac45d878dff6ac8733ec1b7ef955c94325646bf10f13d71dcf276327f89d522255cffe384ee3dcaaf2ca9ad0c821c90405ad3f7a4d6d2da209d3ef481b59dfcbfb2a6c6ff91999eb88b41695ac2f9ee3f3b5f9eceff391b733be9a8ef2c328a6009b3202f4e902f20751289fc3a8d7d5db7a13f32e4ac925ab62f9c3bf03157143eb523e42aa2a543eb5fce3af681183b308c2ba532296ac88a210b063856e34b9fd224a20b16278ad7a62d84eb268707e4d186d6124fba569a8e2846cb1a68cd646fac4051cdbe09ed004be5536edadf7e41b2a3f055700406f5bd3c3555096d2dfc06c3f526140ba4528c721b6bdb2af4eee91720056ffde23e2deb0c40abaae7fc93d2274ffc63a125f4ef3e18a354274d96b8bcde887aefc6276b5cae1d79c213578aa5d803524f310d3ada38207c0037aa475dafeaa774911b64118d224412f6dbcfd15f027051e05b17d6fb8325057af5695b1b253f1e0ef0b8ac4811e5a8c827023223a203f0c9beb6849b4ba72fc92f012f3769d09480ae7cefb67d2025b8cb9ea714aa87f9066c82a9d5bbd0c000f273a7f35602988f627b2935038bac3140a98e2ad00712fc132ce2639a3109e2a48fc55711f31d704f166d2642694da22f9bbcbcc23574c47d191ce06466afeed1e060e03203010cc62cdeab04e6eaa2bda599023d51f5151bafb53e8bb0f27cc28491ad314dd2e206b54a5f47564744cbb096e3d16d8f2177b0c4997c1649e5653eb9136e0ef67b4d18b69373256a59b40d8ac2f909572f84026f8d2c4574b286a3dfd87e000164c8189c2d4b34c2b29cd9852b23ecd3bc83ed1f6ca5202986695272c40a65ca381440cb9b56b49aace55ea38041ed92a0bf075f9cca499280926a7e0238a4e6689847498e289b4f80c94b2be6c7a039a770abf4c0de864181fba07b1f695d1c43d454fd5ef7d0f89f0a616071c78b3a0b46e73633921c2b21f1dcad1fd8c31e3e41e4211aa93752d86344b1b724377019d6ba9b87de90c7d8c5c5016b8486e44c4a1164e50dd68472a9a55e41ee9bbb7deaa1e2e4bed5e4df94f9e30bb3d3c5418e49a2a12db57d9e2eac987a94926649dfd66be07acf1fb680a2f7560a915109d96fd401276677716eea0f7b918a607721cb83add601e7a8678505c5146824d72d46627afba8e58762a5f01d18e35f713e11d1a524d85d39ee248d78b718b4e5bbd528f870d926602b1b9f52d75b00f4193fbe447863df2c337fe1008209a3a51d6f261a26f199a83726a6236b237815de58d0a82b6999fc764d4909aadf0dfff890242fb3036607daa0882f61c64559de2e65d141264e565303e5a80dcc6523439981965b3061e06d0734249cd28eba441ea1c85827ece49b5dbba74f84b5c0d595c83d8cc97faf24053ec490cc4cdd45ce6a51daf17c5e1c88d95e785c5e44400ed6097e2b8befd2a7b4d3aaec6605c7a2ebd9720d104b6d8c3deccf9109d321918ef664f22b3104acf39c52dd94877a68fcf02b564e1362453fb08d7d531a79a9aa3ae657c7dff624d0e9abe77327310f3f926b519b85fc75baf9dc17ab355069ad1abc59cfdf99b08db0b5280c8570e1407236ba37a42e1f77f2b51d0c3763bc56b5459238f57dddf665f9d4c524993b137cf50cdf19cb6cf5e96bb00bd786879803237676f795a8d0a524774cec84df61d5c48d7c1ad34f26bbeaa7aa4e10ffa32df7cdeab25490e84a906c71110bb41cc1e86a45a630ba1f8ad6408ba8a8eb392daf397b901c59e301d39766be0470225bb2a77a2759e876382248522e5bff7bd7a6e305687a820a455945d544be39cfdb3e012ee30a50703633699c93c39a612ee508c050760cccd58e8fe6ae25d4096a2c03110b4abed68ad53b284d72f45f3955dfc5684d8966654083930d401a95a6aa1557621d708f4f8cb175aede4190a596fa6816e8e10aab1aa95236de475a9d7183c662cc2d4b2d0684cb5f4a9de81638ccbe257184f2f86c52ab7bf789b2f874a8d8c1f92978ce7556b77aaa8eaee7ea141a8b8512c75cd84d4e4943c7e82854091104a8942f04b7c0263122dfc15ef6b1de6027c7ffa4b4cdec09d8cbc4f756600bf82bab9bc377917950a82ee7716c969369f71fde8503f9de2b5f05a85c7a11d524431a6e8c303fc3b6a10f51d48c39d439593ee10d79a434f707bee52501074ca5d6cdbbb694521e9b5e798cffe98f6bb8841c1db37029863c8dde0e348a05d6a276667f0b3bb46ed664ce000fb9d6536a6ea710be929c7b8709ac8fe3938bfc512e2ee4770790ef6894cf5ae1133a87d73549effa4d7d053e80ebfe1ccfab69f1a7ea2d06b91a4cb51337963a7d9aa816a694581c8a9d153255ce3cec99e4fe950a0708b7cc6c20a9529009818288d8576938481721936e694b70ce54e58f7cbe609aa5f1de0ba76c2ee5b3a90d2dbd21162bdbb62c2d273525b71507452444144ac2d1f47fa95d5134a8c2fb71e87b37410b5c0cb99f30b2b41fcc69110adff95b85a09dfd2e6ba1e4cf169530d662571a82e71e840dc0e21d63de1a54dda622e6291b9db5d09b3ee90d606e4dc07ba983cc70060c2998d43cd0ddc8f2f6bb1e4ad3033e307704d6ffc36c988a0e9009e2bbb50bc98a438c8d10df7066092d8772c7689704233d60d6bfe55f4c15c692422afefcb919303b5c80375a3f93783f8919a80fdd3450d4bc35d4afdf8f5f00de6a21ed37f776b44880ceb416253fabfc2c3e9fff8e6821b6427b4325316b1724164ad7bb77beec1789f4048550757743a75662da2a38d69ad11468c2e43d311e08515d0eea0cac765376e53f7bea01b02f25512afb986e99c5d9a5b95f5b3df3ad3deaf6bed14f752422ff19544a2ce64cd9b31c3498d4fb63b128af8fa847b5b7da606b3b3063622456277348114dcff3eaf01984fad3f83c42f27d6ebb1ac84fbf9d0b8817000f2f90b3671eb67680c55792214f0bb56dbc15edd2b36079bd3ef66261797d9bbead37088a7bf93731ba878f2daa2b7bc4184cf5157572890f9f1f336fbc2a70c74e012caef4c4f44865ab19d1e0fa591be9278860428d1bf3c0f31af333b543bc5f3eb06231258fe6cc2e9fe9898dc7e0e6c55016c8451bd1d46396e85e0811d3fde20d9cbb071dfdfb95287598d8e56b65b5a4164f8b30b66106599521ae517cbe98fc5de35ea58f49bdde4eac104e527bc34ae821983478c798e6943a074d939c62f2bdcbc70ce558103fd5fc54000a762157bb753e8c91ff538210c4f3e3e5849b5a879a1dd05fbd52e82b941b202ee23463635428ee42f4cfc5d60bb549e2aaa9298a96f1ea1245c03307d3ea1a1ea063555b7235368edd665c878b304b1029a43e6345a13b5ba7b14f9aba698192d846ab79e6d4dea0e485813edd7f376177cc678d49eb602b9e0344ef42b8f713b274901dcf4ce6838f089009b5b238d6d350b6646185068696daecb889cb232e09dac5673dd6e9cb4cf266f13f457db12b88d6603d1c00cd10133eb6d86085be27dcb481e82a9f5139c069199d98a9de2f8e6539590</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看全文</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>汇编</tag>
      
      <tag>CE</tag>
      
      <tag>游戏逆向</tag>
      
      <tag>私密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows驱动4. 常用数据类型</title>
    <link href="/2024/08/03/Windows%E9%A9%B1%E5%8A%A84-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/08/03/Windows%E9%A9%B1%E5%8A%A84-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_windows驱动4_常用数据类型">Windows驱动4. 常用数据类型</h2><div class="sectionbody"><div class="sect2"><h3 id="_字符串">字符串</h3><div class="paragraph"><p>在驱动中, 字符串并不建议使用C中的Ascii字符串或者C++中的std::string, 而是使用 <code>UNICODE_STRING</code> 结构体作为字符串<br></p></div><div class="listingblock"><div class="content"><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UNICODE_STRING</span> &#123;</span><br>USHORT Length;   <span class="hljs-comment">//有效字符串的长度（字节数）</span><br>USHORT MaximumLength; <span class="hljs-comment">//字符串的最大长度（字节数）</span><br>PWSTR Buffer; <span class="hljs-comment">//指向字符串的指针</span><br>&#125;UNICODE_STRING,*PUNICODE_STRING;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="sect3"><h4 id="_字符串的初始化">字符串的初始化</h4><div class="listingblock"><div class="content"><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">VOID <span class="hljs-title function_">StringDemo</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 一个运行时计算常量字符串, 会被放在常量区, 不可修改和释放</span><br>UNICODE_STRING runtimeReadonlyString = &#123; <span class="hljs-number">0</span> &#125;;<br>RtlInitUnicodeString(&amp;runtimeReadonlyString, <span class="hljs-string">L"TestString"</span>);<br>KdPrint((<span class="hljs-string">"RuntimeReadonlyString: %wZ\n"</span>, &amp;runtimeReadonlyString));<br><br><br><span class="hljs-comment">// 一个常量字符串, 不可修改和释放</span><br>UNICODE_STRING constString = RTL_CONSTANT_STRING(<span class="hljs-string">L"Const String"</span>);<br>KdPrint((<span class="hljs-string">"ConstString: %wZ\n"</span>, &amp;constString));<br><br><br><span class="hljs-comment">// 一个栈上字符串, 但是数据放在堆里, 需要手动释放内存</span><br>UNICODE_STRING str1 = &#123; <span class="hljs-number">0</span> &#125;;<br>str1.Buffer = ExAllocatePool2(POOL_FLAG_NON_PAGED, <span class="hljs-keyword">sizeof</span>(WCHAR) * <span class="hljs-number">100</span>, <span class="hljs-string">'1rts'</span>);<br>str1.MaximumLength = <span class="hljs-number">100</span> * <span class="hljs-keyword">sizeof</span>(WCHAR);<br>str1.Length = <span class="hljs-number">0</span>;<br>UNICODE_STRING str2 = RTL_CONSTANT_STRING(<span class="hljs-string">L"Hello"</span>);<br>UNICODE_STRING str3 = RTL_CONSTANT_STRING(<span class="hljs-string">L"World"</span>);<br>RtlAppendUnicodeStringToString(&amp;str1, &amp;str2);<br>RtlAppendUnicodeStringToString(&amp;str1, &amp;str3);<br>KdPrint((<span class="hljs-string">"Str1: %wZ\n"</span>, &amp;str1));<br>ExFreePool(str1.Buffer);<br><br><br><span class="hljs-comment">// 一个栈字符串</span><br>UNICODE_STRING stackString = &#123; <span class="hljs-number">0</span> &#125;;<br>WCHAR stackBuffer[<span class="hljs-number">100</span>] = <span class="hljs-string">L"Stack String"</span>;<br>RtlInitUnicodeString(&amp;stackString, stackBuffer);<br>KdPrint((<span class="hljs-string">"Stack string: %wZ"</span>, &amp;stackString));<br><br><br><span class="hljs-comment">// 一个堆字符串, 需要手动释放内存</span><br>UNICODE_STRING heapString;<br>RtlCreateUnicodeString(&amp;heapString, <span class="hljs-string">L"Heap String"</span>);<br>KdPrint((<span class="hljs-string">"Heap string: %wZ"</span>, &amp;heapString));<br>RtlFreeUnicodeString(&amp;heapString);<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p><code>RtlInitUnicodeString</code> 和 <code>RtlCreateUnicodeString</code> 的不同:</p></div><div class="ulist"><ul><li><p><code>RtlInitUnicodeString(&amp;str, source)</code> 仅仅初始化一个字符串, 不会分配内存, 它只会把内存地址赋值给source, 并计算字符串的长度和最大长度存入 <code>Length</code> 和 <code>MaximumLength</code> 中, 其生命周期由完全由 <code>source</code> 决定</p></li><li><p><code>RtlCreateUnicodeString(&amp;str, source)</code> 会分配内存, 并把source的内容拷贝到新分配的内存中, 需要手动调用 <code>RtlFreeUnicodeString</code> 释放内存</p></li></ul></div><div class="admonitionblock warning"><table><tbody><tr><td class="icon"><div class="title">Warning</div></td><td class="content">调用 <code>RtlInitUnicodeString</code> 如果字符串是一个常量字符串, 则不需要手动释放内存, 否则会导致蓝屏</td></tr></tbody></table></div></div><div class="sect3"><h4 id="_字符串的操作">字符串的操作</h4><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">函数</th><th class="tableblock halign-left valign-top">说明</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlInitUnicodeString</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">初始化字符串</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlCreateUnicodeString</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">创建字符串</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlAppendUnicodeStringToString</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">追加字符串</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlCopyUnicodeString</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">复制字符串</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlEqualUnicodeString</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">比较字符串</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlFreeUnicodeString</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">释放字符串</p></td></tr></tbody></table></div></div><div class="sect2"><h3 id="_基础类型">基础类型</h3><div class="paragraph"><p>基础类型尽量使用大写形式的类型, 在打印时其占位符如下:</p></div><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">占位符</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">SHORT</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%hd</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">INT</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%d</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">LONG</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%ld</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">HEX</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%x(小写) 或 %X(大写)</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">char*</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%s</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">wchar_t*</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%S</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">ANSI_STRING</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%Z</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">UNICODE_STRING</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">%wZ</p></td></tr></tbody></table></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>驱动</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驱动</tag>
      
      <tag>Windows</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows驱动3. 内存管理</title>
    <link href="/2024/08/02/Windows%E9%A9%B1%E5%8A%A83-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2024/08/02/Windows%E9%A9%B1%E5%8A%A83-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_windows驱动3_内存管理">Windows驱动3. 内存管理</h2><div class="sectionbody"><div class="paragraph"><p>在驱动开发中, 通常不能使用C运行库中的内存分配函数, 如 <code>malloc</code>, <code>free</code>, <code>new</code>, <code>delete</code>.<br>内核模式中有自己的内存分配函数</p></div><div class="sect2"><h3 id="_内存管理函数">内存管理函数</h3><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">函数</th><th class="tableblock halign-left valign-top">C库对应</th><th class="tableblock halign-left valign-top">描述</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">ExAllocatePool2</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">malloc</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">分配内存</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">ExFreePool</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">free</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">释放内存</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlEqualMemory</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">memcmp</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">比较内存</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlCopyMemory</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">memcpy</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">复制内存</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlFillMemory</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">memset</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">填充内存</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlZeroMemory</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">memset</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">清零内存</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RtlMoveMemory</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">memmove</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">移动内存</p></td></tr></tbody></table></div><div class="sect2"><h3 id="_块表_exinitializepagedlookasidelist">块表 <code>ExInitializePagedLookasideList</code></h3><div class="paragraph"><p>块表非常类似与ObjectPool, 用于快速分配和回收obj, 但是内存并不会被回收</p></div><div class="listingblock"><div class="content"><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">PAGED_LOOKASIDE_LIST lookasideList;<br><span class="hljs-comment">// 初始化 PAGED_LOOKASIDE_LIST</span><br>ExInitializePagedLookasideList(&amp;lookasideList, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(MyObject), <span class="hljs-string">'tag'</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 使用 Lookaside List</span><br>MyObject* obj = ExAllocateFromPagedLookasideList(&amp;lookasideList);<br><span class="hljs-comment">// ... 使用 obj ...</span><br><br><span class="hljs-comment">// 完成使用后，返回 Lookaside List</span><br>ExFreeToPagedLookasideList(&amp;lookasideList, obj);<br><br><span class="hljs-comment">// 删除 Lookaside List</span><br>ExDeletePagedLookasideList(&amp;lookasideList);<br></code></pre></td></tr></tbody></table></figure></div></div></div><div class="sect2"><h3 id="_c中的内存管理">C++中的内存管理</h3><div class="paragraph"><p>在C++中, 不能使用原生的 <code>new</code> 和 <code>delete</code> , 需要对这两个操作符进行重载, 从而符合内核中的管理内存方法</p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">KdPrint</span>((<span class="hljs-string">"new operator\n"</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">ExAllocatePool</span>(NonPagedPool, size);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size, POOL_TYPE poolType)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">KdPrint</span>((<span class="hljs-string">"new operator\n"</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">ExAllocatePool</span>(poolType, size);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>* p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">KdPrint</span>((<span class="hljs-string">"delete operator\n"</span>));<br><span class="hljs-built_in">ExFreePool</span>(p);<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>驱动</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驱动</tag>
      
      <tag>Windows</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows驱动2. 驱动对象和设备对象</title>
    <link href="/2024/08/01/Windows%E9%A9%B1%E5%8A%A82-%E9%A9%B1%E5%8A%A8%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%AE%BE%E5%A4%87%E5%AF%B9%E8%B1%A1/"/>
    <url>/2024/08/01/Windows%E9%A9%B1%E5%8A%A82-%E9%A9%B1%E5%8A%A8%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%AE%BE%E5%A4%87%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_驱动对象和设备对象">驱动对象和设备对象</h2><div class="sectionbody"><div class="sect2"><h3 id="_驱动入口函数">驱动入口函数</h3><div class="listingblock"><div class="content"><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">NTSTATUS <span class="hljs-title function_">DriverEntry</span><span class="hljs-params">(</span><br><span class="hljs-params">    IN PDRIVER_OBJECT pDriverObject,</span><br><span class="hljs-params">    IN PUNICODE_STRING pRegistryPath</span><br><span class="hljs-params">)</span><br></code></pre></td></tr></tbody></table></figure></div></div></div><div class="sect2"><h3 id="_驱动对象_driver_object_pdriver_object">驱动对象 <code>DRIVER_OBJECT</code> <code>*PDRIVER_OBJECT</code></h3><div class="quoteblock"><blockquote><div class="paragraph"><p>操作系统使用 DEVICE_OBJECT 结构来表示设备对象。 设备对象表示驱动程序处理 I/O 请求的逻辑、虚拟或物理设备。</p></div></blockquote><div class="attribution">— MSDN</div></div><div class="paragraph"><p>这里的设备范围很广, 除了物理设备外, 系统资源(内存管理, 进程, 线程管理) 也可以视作设备对象.<br></p></div><div class="paragraph"><p>操作都是由设备完成的, 驱动负责和设备进行通信, 通过设备对象来完成.<br></p></div><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">名称</th><th class="tableblock halign-left valign-top">描述</th><th class="tableblock halign-left valign-top">备注</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">CSHORT</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">Type</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动对象类型</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">CSHORT</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">Size</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动对象大小</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PDEVICE_OBJECT</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DeviceObject</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">设备对象</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">一个驱动程序对应多个设备对象</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">ULONG</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">Flags</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动对象标志</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PVOID</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverStart</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动程序入口地址</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">ULONG</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverSize</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动程序大小</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PVOID</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverSection</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动链表</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">整个系统里驱动的链表管理</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PDRIVER_EXTENSION</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverExtension</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动扩展</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">UNICODE_STRING</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverName</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动名</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">UNICODE_STRING</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">HardwareDatabase</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">硬件数据库</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PFAST_IO_DISPATCH</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">FastIoDispatch</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">快速IO分发</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PDRIVER_INITIALIZE</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverInit</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动初始化</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PDRIVER_STARTIO</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverStartIo</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动开始IO</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PDRIVER_UNLOAD</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">DriverUnload</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动卸载</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">PDRIVER_DISPATCH</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + 1]</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">驱动主要功能</p></td><td class="tableblock halign-left valign-top"></td></tr></tbody></table></div><div class="sect2"><h3 id="_创建设备对象_iocreatedevice">创建设备对象 <code>IoCreateDevice</code></h3><div class="listingblock"><div class="content"><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span></span><br><br><br>VOID <span class="hljs-title function_">DriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT pDriverObject)</span><br>&#123;<br>KdPrint((<span class="hljs-string">"Driver Unload\n"</span>));<br>&#125;<br><br>NTSTATUS <span class="hljs-title function_">DefaultDispatch</span><span class="hljs-params">(PDEVICE_OBJECT pDeviceObject, PIRP pIrp)</span><br>&#123;<br>KdPrint((<span class="hljs-string">"Default Dispatch\n"</span>));<br>IoCompleteRequest(pIrp, IO_NO_INCREMENT);<br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br><br><br>NTSTATUS <span class="hljs-title function_">DriverEntry</span><span class="hljs-params">(IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING pRegistryPath)</span><br>&#123;<br>pDriverObject-&gt;DriverUnload = DriverUnload;<br>KdPrint((<span class="hljs-string">"Driver Entry\n"</span>));<br><br>UNICODE_STRING uDevName = &#123; <span class="hljs-number">0</span> &#125;;<br>UNICODE_STRING uSymLink = &#123; <span class="hljs-number">0</span> &#125;;<br>PDEVICE_OBJECT pDeviceObject = <span class="hljs-literal">NULL</span>;<br>NTSTATUS status = STATUS_SUCCESS;<br><br>RtlInitUnicodeString(&amp;uDevName, <span class="hljs-string">L"\\demoDriver\\MyDevice"</span>);<br>RtlInitUnicodeString(&amp;uSymLink, <span class="hljs-string">L"\\demoDriverLink\\MyDevice"</span>);<br><br>    <span class="hljs-comment">// 创建一个新的设备对象</span><br>status = IoCreateDevice(<br>pDriverObject,<br><span class="hljs-number">0</span>,<br>&amp;uDevName,<br>FILE_DEVICE_UNKNOWN,<br>FILE_DEVICE_SECURE_OPEN,<br>FALSE,  <span class="hljs-comment">// 是否为独占设备</span><br>&amp;pDeviceObject<br>);<br><br><span class="hljs-keyword">if</span> (!NT_SUCCESS(status))<br>&#123;<br>KdPrint((<span class="hljs-string">"Create Device Failed\n"</span>));<br><span class="hljs-keyword">return</span> status;<br>&#125;<br><br>pDeviceObject-&gt;Flags |= DO_BUFFERED_IO;  <span class="hljs-comment">// 设备类型, 此处为缓冲设备</span><br><br>status = IoCreateSymbolicLink(&amp;uSymLink, &amp;uDevName);  <span class="hljs-comment">// 创建符号链接</span><br><br><span class="hljs-keyword">if</span> (!NT_SUCCESS(status))<br>&#123;<br>KdPrint((<span class="hljs-string">"Create Symbolic Link Failed\n"</span>));<br>IoDeleteDevice(pDeviceObject);<br><span class="hljs-keyword">return</span> status;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; IRP_MJ_MAXIMUM_FUNCTION; i++)  <span class="hljs-comment">// 驱动的主要回调</span><br>&#123;<br>pDriverObject-&gt;MajorFunction[i] = DefaultDispatch;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>驱动</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驱动</tag>
      
      <tag>Windows</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows驱动1. Hello World</title>
    <link href="/2024/07/31/Windows%E9%A9%B1%E5%8A%A81-Hello-World/"/>
    <url>/2024/07/31/Windows%E9%A9%B1%E5%8A%A81-Hello-World/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_hello_world_首个程序">Hello World 首个程序</h2><div class="sectionbody"><div class="listingblock"><div class="content"><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span>  <span class="hljs-comment">// 驱动头</span></span><br><br><span class="hljs-comment">// 驱动卸载函数</span><br>VOID <span class="hljs-title function_">DriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT pDriverObject)</span><br>&#123;<br>KdPrint((<span class="hljs-string">"Driver Unload\n"</span>));<br>&#125;<br><br><span class="hljs-comment">// 驱动入口函数</span><br>NTSTATUS <span class="hljs-title function_">DriverEntry</span><span class="hljs-params">(IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING pRegistryPath)</span><br>&#123;<br>    <span class="hljs-comment">// 设置卸载函数</span><br>pDriverObject-&gt;DriverUnload = DriverUnload;<br>KdPrint((<span class="hljs-string">"Driver Entry\n"</span>));<br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>驱动</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驱动</tag>
      
      <tag>Windows</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向基础3. 结构体数组的汇编结构</title>
    <link href="/2024/07/29/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%803-%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%E7%9A%84%E6%B1%87%E7%BC%96%E7%BB%93%E6%9E%84/"/>
    <url>/2024/07/29/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%803-%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84%E7%9A%84%E6%B1%87%E7%BC%96%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_结构体数组的汇编结构">结构体数组的汇编结构</h2><div class="sectionbody"><div class="sect2"><h3 id="_在栈上的数组数据结构">在栈上的数组数据结构</h3><div class="paragraph"><p>测试使用结构体如下</p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> count;<br>    <span class="hljs-type">int</span> count2;<br>    <span class="hljs-type">int</span> count3;<br>&#125; GameObject;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>测试代码如下</p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    GameObject objs[<span class="hljs-number">3</span>] = &#123;<br>            GameObject&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x34</span>&#125;,<br>            GameObject&#123;<span class="hljs-number">2</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x67</span>&#125;,<br>            GameObject&#123;<span class="hljs-number">3</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x90</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">auto</span> obj1 = &amp;objs[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">auto</span> obj2 = &amp;objs[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">auto</span> obj3 = &amp;objs[<span class="hljs-number">2</span>];<br><br><br>    <span class="hljs-keyword">auto</span> count1 = obj1-&gt;count;<br>    <span class="hljs-keyword">auto</span> count2 = obj2-&gt;count2;<br>    <span class="hljs-keyword">auto</span> count3 = obj3-&gt;count3;<br><br>    <span class="hljs-keyword">auto</span> sum = count1 + count2 + count3;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>生成汇编如下:</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x90</span>                <span class="hljs-comment">; 分配栈空间</span><br><span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]        <span class="hljs-comment">; 数组开始地址为 rsp + 0x20</span><br><br><span class="hljs-comment">; 填充内存为0xcccccccc</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0x1c</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0xcccccccc</span><br><span class="hljs-keyword">rep</span>    <span class="hljs-keyword">stosd</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-comment">; 填充初始化数据</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>], <span class="hljs-number">0x1</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2c</span>], <span class="hljs-number">0x12</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>], <span class="hljs-number">0x23</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x34</span>], <span class="hljs-number">0x34</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x38</span>], <span class="hljs-number">0x2</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x3c</span>], <span class="hljs-number">0x45</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x40</span>], <span class="hljs-number">0x56</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x44</span>], <span class="hljs-number">0x67</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x48</span>], <span class="hljs-number">0x3</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x4c</span>], <span class="hljs-number">0x78</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x50</span>], <span class="hljs-number">0x89</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x54</span>], <span class="hljs-number">0x90</span><br><br><span class="hljs-comment">; [rsp + 0x68] = &amp;objs[0]</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x10</span><br><span class="hljs-keyword">imul</span>   <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x0</span><br><span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsp</span> + <span class="hljs-built_in">rax</span> + <span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x68</span>], <span class="hljs-built_in">rax</span><br><br><span class="hljs-comment">; [rsp + 0x70] = &amp;objs[1]</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x10</span><br><span class="hljs-keyword">imul</span>   <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x1</span><br><span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsp</span> + <span class="hljs-built_in">rax</span> + <span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x70</span>], <span class="hljs-built_in">rax</span><br><br><span class="hljs-comment">; [rsp + 0x78] = &amp;objs[2]</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x10</span><br><span class="hljs-keyword">imul</span>   <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x2</span><br><span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsp</span> + <span class="hljs-built_in">rax</span> + <span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x78</span>], <span class="hljs-built_in">rax</span><br><br><span class="hljs-comment">; [rsp + 0x80] = objs[0].count</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x68</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x4</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x80</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-comment">; [rsp + 0x84] = objs[1].count2</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x70</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x8</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x84</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-comment">; [rsp + 0x88] = objs[2].count3</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x78</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0xc</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x88</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-comment">; sum = count1 + count2 + count3</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x84</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x80</span>]<br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x88</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8c</span>], <span class="hljs-built_in">eax</span><br><br>...<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>可以看出其栈如下</p></div><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">rsp偏移</th><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">内容</th><th class="tableblock halign-left valign-top">值</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x28</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[0].id</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">1</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x2c</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[0].count</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x12</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x30</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[0].count2</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x23</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x34</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[0].count3</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x34</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x38</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[1].id</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x3c</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[1].count</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x45</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x40</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[1].count2</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x56</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x44</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[1].count3</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x67</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x48</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[2].id</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">3</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x4c</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[2].count</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x78</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x50</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[2].count2</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x89</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x54</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[2].count3</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0x90</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x68</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">qword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">&amp;objs[0]</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">rsp + 0x28</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x70</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">qword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">&amp;objs[1]</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">rsp + 0x38</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x78</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">qword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">&amp;objs[2]</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">rsp + 0x48</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x80</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[0].count</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x84</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[1].count2</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x88</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">objs[2].count3</p></td><td class="tableblock halign-left valign-top"></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">0x8c</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">sum</p></td><td class="tableblock halign-left valign-top"></td></tr></tbody></table><div class="paragraph"><p>其取值的方式为<br><code>[&amp;arr + sizeof(obj) * offset + member_offset]</code></p></div></div><div class="sect2"><h3 id="_在堆上的数组取值方式">在堆上的数组取值方式</h3><div class="paragraph"><p>代码:</p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">GameObject **<span class="hljs-title">createObjArr</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> **objs = <span class="hljs-keyword">new</span> GameObject *[<span class="hljs-number">3</span>];<br>    objs[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> GameObject&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x34</span>&#125;;<br>    objs[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> GameObject&#123;<span class="hljs-number">2</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x67</span>&#125;;<br>    objs[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> GameObject&#123;<span class="hljs-number">3</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x90</span>&#125;;<br>    <span class="hljs-keyword">return</span> objs;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> objs = <span class="hljs-built_in">createObjArr</span>();<br><br>    <span class="hljs-type">int</span> count1 = objs[<span class="hljs-number">0</span>]-&gt;count;<br>    <span class="hljs-type">int</span> count2 = objs[<span class="hljs-number">1</span>]-&gt;count2;<br>    <span class="hljs-type">int</span> count3 = objs[<span class="hljs-number">2</span>]-&gt;count3;<br><br>    <span class="hljs-type">int</span> sum = count1 + count2 + count3;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="admonitionblock warning"><table><tbody><tr><td class="icon"><div class="title">Warning</div></td><td class="content">此处忽略内存回收, 忽略分析创建, 仅仅研究如何取值</td></tr></tbody></table></div><div class="paragraph"><p>生成汇编如下:</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; [rsp + 0x20] = &amp;arr</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>], <span class="hljs-built_in">rax</span><br><br><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x8</span><br><span class="hljs-keyword">imul</span>   <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x0</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-built_in">rax</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x4</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x8</span>                         <span class="hljs-comment">; eax = sizeof(GameObject *)</span><br><span class="hljs-keyword">imul</span>   <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x1</span>                    <span class="hljs-comment">; rax = sizeof(GameObject *) * 1</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-built_in">rax</span>]       <span class="hljs-comment">; rax = &amp;arr + eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x8</span>]       <span class="hljs-comment">; eax = [rax + 0x8]</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2c</span>], <span class="hljs-built_in">eax</span>      <span class="hljs-comment">; [rsp + 0x2c] = eax</span><br><br><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x8</span><br><span class="hljs-keyword">imul</span>   <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">rax</span>, <span class="hljs-number">0x2</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-built_in">rax</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0xc</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2c</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x34</span>], <span class="hljs-built_in">eax</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>对于堆上的数组, 取值为<br><code>[[&amp;arr + sizeof(obj*) * offset] + member_offset]</code></p></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>学习</category>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向基础2. C语言数据结构的汇编结构</title>
    <link href="/2024/07/27/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%802-C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%B1%87%E7%BC%96%E7%BB%93%E6%9E%84/"/>
    <url>/2024/07/27/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%802-C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%B1%87%E7%BC%96%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_c语言数据结构的汇编结构">C语言数据结构的汇编结构</h2><div class="sectionbody"><div class="sect2"><h3 id="_局部变量的分配和访问">局部变量的分配和访问</h3><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">var</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> a = <span class="hljs-number">0x1</span>;<br>    <span class="hljs-type">short</span> b = <span class="hljs-number">0x10</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0x11</span>;<br>    <span class="hljs-type">long</span> d = <span class="hljs-number">0x100</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> e = <span class="hljs-number">0x101</span>;<br><br>    <span class="hljs-keyword">return</span> a + b + c + d + e;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>已剔除保护代码</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x20</span>                      <span class="hljs-comment">; 分配空间</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-number">0x1</span>            <span class="hljs-comment">; byte</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x10</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x4</span>], <span class="hljs-built_in">ax</span>       <span class="hljs-comment">; short</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8</span>], <span class="hljs-number">0x11</span>    <span class="hljs-comment">; int</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0xc</span>], <span class="hljs-number">0x100</span>   <span class="hljs-comment">; long</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>], <span class="hljs-number">0x101</span>  <span class="hljs-comment">; long long</span><br><br><span class="hljs-keyword">movsx</span>  <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>]            <span class="hljs-comment">; a</span><br><span class="hljs-keyword">movsx</span>  <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x4</span>]      <span class="hljs-comment">; b</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8</span>]     <span class="hljs-comment">; c</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0xc</span>]     <span class="hljs-comment">; d</span><br><span class="hljs-keyword">cdqe</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]    <span class="hljs-comment">; e</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x20</span><br><span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">ret</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>可得到局部变量分配的结构如下：</p></div><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">偏移</th><th class="tableblock halign-left valign-top">栈大小</th><th class="tableblock halign-left valign-top">汇编</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">byte</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">0</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">byte ptr</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">short</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">word ptr</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">int</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword ptr</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">long</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">c</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">dword ptr</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">long long</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">10</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">qword ptr</p></td></tr></tbody></table><div class="paragraph"><p>访问也是根据栈来的</p></div></div><div class="sect2"><h3 id="_结构体的分配和访问">结构体的分配和访问</h3><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">short</span> b;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">long</span> d;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> e;<br>&#125; my_struct;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">struct_foo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    my_struct s = &#123;&#125;;<br>    s.a = <span class="hljs-number">0x1</span>;<br>    s.b = <span class="hljs-number">0x10</span>;<br>    s.c = <span class="hljs-number">0x11</span>;<br>    s.d = <span class="hljs-number">0x100</span>;<br>    s.e = <span class="hljs-number">0x101</span>;<br><br>    <span class="hljs-keyword">return</span> s.a + s.b + s.c + s.d + s.e;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span><br><span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x50</span>                      <span class="hljs-comment">; 分配栈空间</span><br><span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rdi</span>, [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br><br><span class="hljs-comment">; 初始化栈空间</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0xc</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0xcccccccc</span><br><span class="hljs-keyword">rep</span>    <span class="hljs-keyword">stosd</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">eax</span><br><br><span class="hljs-comment">; rdi = rsp + 0x28, 循环24(0x18)次, 写入byte 0, 初始化结构体</span><br><span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rax</span>, [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">rax</span><br><span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0x18</span><br><span class="hljs-keyword">rep</span>    <span class="hljs-keyword">stosb</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">es</span>:[<span class="hljs-built_in">rdi</span>], <span class="hljs-built_in">al</span><br><br><span class="hljs-comment">; 给结构体内数据进行赋值</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>], <span class="hljs-number">0x1</span>     <span class="hljs-comment">; a</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x10</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2a</span>], <span class="hljs-built_in">ax</span>      <span class="hljs-comment">; 0x2a = 0x28 + 0x2 (长2)</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2c</span>], <span class="hljs-number">0x11</span>   <span class="hljs-comment">; 0x2c = 0x28 + 0x4 (长4)</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>], <span class="hljs-number">0x100</span>  <span class="hljs-comment">; 0x30 = 0x28 + 0x8 (长8)</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x38</span>], <span class="hljs-number">0x101</span>  <span class="hljs-comment">; 0x38 = 0x28 + 0x10 (长8)</span><br><br><span class="hljs-comment">; 将数据相加在一起</span><br><span class="hljs-keyword">movsx</span>  <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">movsx</span>  <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2a</span>]<br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x2c</span>]<br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">edx</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>]<br><span class="hljs-keyword">cdqe</span><br><span class="hljs-keyword">add</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x38</span>]<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>可得到结构体分配的结构如下：</p></div><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">偏移</th><th class="tableblock halign-left valign-top">对齐后大小</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">byte</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">28</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">short</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">2a</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">2</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">int</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">2c</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">4</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">long</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">30</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">long long</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">38</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">8</p></td></tr></tbody></table></div><div class="sect2"><h3 id="_结构体指针的数据访问">结构体指针的数据访问</h3><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">char</span> a;<br>    <span class="hljs-type">short</span> b;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">long</span> d;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> e;<br>&#125; my_struct;<br><br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">struct_foo_</span><span class="hljs-params">(my_struct *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    s-&gt;a = <span class="hljs-number">0x1</span>;<br>    s-&gt;b = <span class="hljs-number">0x10</span>;<br>    s-&gt;c = <span class="hljs-number">0x11</span>;<br>    s-&gt;d = <span class="hljs-number">0x100</span>;<br>    s-&gt;e = <span class="hljs-number">0x101</span>;<br>    <span class="hljs-keyword">return</span> s-&gt;a + s-&gt;b + s-&gt;c + s-&gt;d + s-&gt;e;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> *s = (my_struct *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(my_struct));<br>    <span class="hljs-built_in">struct_foo_</span>(s);<br>    <span class="hljs-built_in">free</span>(s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>指针的传递</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br><span class="hljs-keyword">call</span>   <span class="hljs-number">0x140001276</span>  <span class="hljs-comment">; 将结构体指针通过rcx传递给函数</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>汇编:</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">struct_foo_(my_struct *):<br>    <span class="hljs-comment">; 将结构体指针传递到 rsp+0x8 位置</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8</span>], <span class="hljs-built_in">rcx</span><br>    <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span><br><br>    <span class="hljs-comment">; a = 0x1, 由于push rdi, 偏移变成了 0x8 + 0x8 = 0x10</span><br>    <span class="hljs-comment">; 此时[rsp + 0x10]放的是结构体指针</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span>], <span class="hljs-number">0x1</span><br><br>    <span class="hljs-comment">; b = 0x10, rcx = rsp + 0x10, 再加0x2得到b地址</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-number">0x2</span>], <span class="hljs-built_in">ax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br><br>    <span class="hljs-comment">; c = 0x11</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x4</span>], <span class="hljs-number">0x11</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br><br>    <span class="hljs-comment">; d = 0x100</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x8</span>], <span class="hljs-number">0x100</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br><br>    <span class="hljs-comment">; e = 0x101</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span> + <span class="hljs-number">0x10</span>], <span class="hljs-number">0x101</span><br><br>    <span class="hljs-comment">; 计算</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">movsx</span>  <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">movsx</span>  <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-number">0x2</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-number">0x4</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-number">0x8</span>]<br>    <span class="hljs-keyword">cdqe</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rcx</span> + <span class="hljs-number">0x10</span>]<br>    <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">ret</span><br></code></pre></td></tr></tbody></table></figure></div></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>学习</category>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Hexo中使用Asciidoc格式编写文章</title>
    <link href="/2024/07/27/%E5%9C%A8Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8Asciidoc%E6%A0%BC%E5%BC%8F%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/27/%E5%9C%A8Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8Asciidoc%E6%A0%BC%E5%BC%8F%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_在hexo中使用asciidoc格式编写文章">在Hexo中使用Asciidoc格式编写文章</h2><div class="sectionbody"><div class="sect2"><h3 id="_前言">前言</h3><div class="paragraph"><p>虽然markdown简单易懂, 但是其功能有时非常有限, 例如自定义的表格, mark等, 需要使用三方语法甚至内嵌html来实现, 于是打算使用asciidoc来编写文章, 但是hexo默认不支持asciidoc, 本文记录hexo适配asciidoc的过程.</p></div></div><div class="sect2"><h3 id="_安装asciidoc">安装asciidoc</h3><div class="paragraph"><p>虽然已经有了 <a href="https://github.com/hcoona/hexo-renderer-asciidoc">hexo-renderer-asciidoc</a> 这个插件, 但是有几点会导致这个插件并不好用<br></p></div><div class="olist arabic"><ol class="arabic"><li><p>此插件使用的代码高亮是 <code>hexo-utils</code> 提供的, 但是它的代码高亮并不会读配置文件, 于是会和主题配置格格不入</p></li><li><p>asciidoc需要引入额外的css, 但是这个插件并未限定作用域. 如果导入asciidoc的css会导致全局生效, 影响其他md的文章</p></li></ol></div><div class="paragraph"><p>所需要依赖</p></div><div class="listingblock"><div class="content"><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">"asciidoctor"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^3.0.4"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"cheerio"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1.0.0-rc.12"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"entities"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^5.0.0"</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="admonitionblock tip"><table><tbody><tr><td class="icon"><div class="title">Tip</div></td><td class="content">请酌情对依赖进行升级</td></tr></tbody></table></div></div><div class="sect2"><h3 id="_编写renderer">编写renderer</h3><div class="paragraph"><p>在hexo的根目录下创建一个`scripts`文件夹, 并创建一个 <code>asciidoc-renderer.js</code> 文件, 内容如下</p></div><div class="listingblock"><div class="content"><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> asciidoctor = <span class="hljs-built_in">require</span>(<span class="hljs-string">'asciidoctor'</span>)()<br><span class="hljs-keyword">const</span> entities = <span class="hljs-built_in">require</span>(<span class="hljs-string">'entities'</span>)<br><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cheerio'</span>)<br><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">wrapContainer</span>(<span class="hljs-params">html</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class="asciidoc-container"&gt;<span class="hljs-subst">$&#123;html&#125;</span>&lt;/div&gt;`</span><br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderer</span>(<span class="hljs-params">data, options</span>) &#123;<br>    <span class="hljs-keyword">const</span> extension_registry = asciidoctor.<span class="hljs-property">Extensions</span>.<span class="hljs-title function_">create</span>()<br>    extension_registry.<span class="hljs-title function_">includeProcessor</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br>        self.<span class="hljs-title function_">handles</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">target</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;)<br>        self.<span class="hljs-title function_">process</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">doc, reader, target, attrs</span>) &#123;<br>            <span class="hljs-keyword">const</span> postDir = p.<span class="hljs-title function_">dirname</span>(data.<span class="hljs-property">path</span>)<br>            <span class="hljs-keyword">const</span> includePath = p.<span class="hljs-title function_">join</span>(postDir, target)<br>            <span class="hljs-keyword">const</span> content = fs.<span class="hljs-title function_">readFileSync</span>(includePath, <span class="hljs-string">'utf8'</span>)<br>            <span class="hljs-keyword">return</span> reader.<span class="hljs-title function_">pushInclude</span>(content, target, target, <span class="hljs-number">1</span>, attrs)<br>        &#125;)<br>    &#125;)<br><br>    <span class="hljs-keyword">const</span> html = asciidoctor.<span class="hljs-title function_">convert</span>(data.<span class="hljs-property">text</span>, &#123;<br>        <span class="hljs-attr">doctype</span>: <span class="hljs-string">'article'</span>,<br>        <span class="hljs-attr">safe</span>: <span class="hljs-string">'server'</span>,<br>        <span class="hljs-attr">attributes</span>: [<br>            <span class="hljs-string">'source-highlighter=html-pipeline'</span><br>        ],<br>        <span class="hljs-attr">extension_registry</span>: extension_registry,<br>    &#125;)<br><br><br>    <span class="hljs-keyword">const</span> $ = cheerio.<span class="hljs-title function_">load</span>(<span class="hljs-title function_">wrapContainer</span>(html), &#123;<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span><br>    &#125;)<br><br>    $(<span class="hljs-string">'pre.highlight'</span>).<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">_index, elem</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> codeNode = elem.<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">const</span> lang = codeNode.<span class="hljs-property">attribs</span>[<span class="hljs-string">'data-lang'</span>]<br>        <span class="hljs-keyword">const</span> sourceCodeText = entities.<span class="hljs-title function_">decodeXML</span>($(codeNode).<span class="hljs-title function_">text</span>())<br>        <span class="hljs-keyword">const</span> content = hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">highlight</span>.<span class="hljs-title function_">exec</span>(hexo.<span class="hljs-property">config</span>.<span class="hljs-property">syntax_highlighter</span>, &#123;<br>            <span class="hljs-attr">context</span>: hexo,<br>            <span class="hljs-attr">args</span>: [sourceCodeText, &#123;<br>                lang,<br>                <span class="hljs-attr">lines_length</span>: sourceCodeText.<span class="hljs-title function_">split</span>(<span class="hljs-string">'\n'</span>).<span class="hljs-property">length</span><br>            &#125;]<br>        &#125;)<br>        $(elem).<span class="hljs-title function_">replaceWith</span>(content)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> $.<span class="hljs-title function_">html</span>()<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#123;/g</span>, <span class="hljs-string">'&#123;'</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#125;/g</span>, <span class="hljs-string">'&#125;'</span>)<br>&#125;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">renderer</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">'ad'</span>, <span class="hljs-string">'html'</span>, renderer, <span class="hljs-literal">true</span>)<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">renderer</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">'adoc'</span>, <span class="hljs-string">'html'</span>, renderer, <span class="hljs-literal">true</span>)<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">renderer</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">'asciidoc'</span>, <span class="hljs-string">'html'</span>, renderer, <span class="hljs-literal">true</span>)<br><br><span class="hljs-keyword">const</span> css = hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">helper</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">"css"</span>).<span class="hljs-title function_">bind</span>(hexo);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">'body_end'</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">css</span>(<span class="hljs-string">"/css/asciidoc-renderer.css"</span>)<br>&#125;)<br></code></pre></td></tr></tbody></table></figure></div></div></div><div class="sect2"><h3 id="_编写css">编写css</h3><div class="paragraph"><p>由于asciidoc有一些样式, 这些样式需要引入 (当然不引入也可以)</p></div><div class="olist arabic"><ol class="arabic"><li><p>将 <code>@asciidoctor/core</code> 下的 <code>asciidoctor.css</code> 复制到 <code>source/css</code> 下</p></li><li><p>在 <code>source/css</code> 下创建一个 <code>asciidoc-renderer.less</code> 文件, 内容如下</p></li><li><p>安装 <code>hexo-renderer-less</code> 插件</p></li><li><p>注入 <code>asciidoc-renderer.css</code> 到主题中</p></li></ol></div><div class="listingblock"><div class="content"><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.asciidoc-container</span> &#123;<br>  <span class="hljs-keyword">@import</span> (less) <span class="hljs-string">"asciidoctor.css"</span>;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>在 <code>asciidoc-renderer.js</code> 下面添加</p></div><div class="listingblock"><div class="content"><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> css = hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">helper</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">"css"</span>).<span class="hljs-title function_">bind</span>(hexo)<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">'body_end'</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">css</span>(<span class="hljs-string">"/css/asciidoc-renderer.css"</span>)<br>&#125;)<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>asciidoctor.css里有些主题和博客里的主题对不上, 我删除了部分样式例如</p></div><div class="ulist"><ul><li><p>所有的 <code>font-family</code></p></li><li><p>所有的 <code>font-color</code></p></li><li><p>大部分 <code>background-color</code></p></li></ul></div></div><div class="sect2"><h3 id="_魔改hexo">魔改Hexo</h3><div class="admonitionblock warning"><table><tbody><tr><td class="icon"><div class="title">Warning</div></td><td class="content">Hexo可能已经修复此问题, 请追踪Issue: <a href="https://github.com/hexojs/hexo/issues/5523"> #5523 </a></td></tr></tbody></table></div><div class="paragraph"><p>由于Hexo的 <a href="https://github.com/hexojs/hexo/blob/439ee6d19ead7973048b61f896437c30803cf17a/lib/plugins/processor/post.ts#L53">这行代码</a>, 导致在开启`post_asset_folder`的情况下, 只能渲染一种格式的文章, 于是需要魔改Hexo</p></div><div class="paragraph"><p>在对应的代码处修改为</p></div><div class="listingblock"><div class="content"><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (result.<span class="hljs-property">renderable</span> &amp;&amp; ctx.<span class="hljs-property">config</span>.<span class="hljs-property">post_asset_folder</span>) &#123;<br>  result.<span class="hljs-property">renderable</span> = (<span class="hljs-title function_">extname</span>(ctx.<span class="hljs-property">config</span>.<span class="hljs-property">new_post_name</span>) === <span class="hljs-title function_">extname</span>(path))<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(ctx.<span class="hljs-property">config</span>.<span class="hljs-property">post_extension</span>) || ctx.<span class="hljs-property">config</span>.<span class="hljs-property">post_extension</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    ctx.<span class="hljs-property">log</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">'post_asset_folder is set, but no post_extension is defined. Defaulting to new_post_name extension.'</span>)<br>    result.<span class="hljs-property">renderable</span> = (<span class="hljs-title function_">extname</span>(ctx.<span class="hljs-property">config</span>.<span class="hljs-property">new_post_name</span>) === <span class="hljs-title function_">extname</span>(path))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    result.<span class="hljs-property">renderable</span> = ctx.<span class="hljs-property">config</span>.<span class="hljs-property">post_extension</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-title function_">extname</span>(path).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>在 <code>_config.yml</code> 中添加</p></div><div class="listingblock"><div class="content"><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_extension:</span> [ <span class="hljs-string">'md'</span>, <span class="hljs-string">"adoc"</span> ]<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>即可支持md和adoc的混合渲染</p></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向基础1. C语言函数调用</title>
    <link href="/2024/07/26/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%801-C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    <url>/2024/07/26/%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%801-C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_c语言函数调用">C语言函数调用</h2><div class="sectionbody"><div class="sect2"><h3 id="_1_简单调用">1.简单调用</h3><div class="sect3"><h4 id="_总览">总览</h4><div class="paragraph"><p>对于一个简单的C语言程序, 其代码如下</p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> data = a + b;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> data = <span class="hljs-built_in">plus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"data: %d\n"</span>, data);<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>其产生的汇编代码如下</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">main():<br>    <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x30</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-number">0x2</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0x1</span><br>    <span class="hljs-keyword">call</span>   <span class="hljs-number">0x1400012c1</span>                <span class="hljs-comment">; plus(int,int)</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>], <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br>    <span class="hljs-keyword">lea</span>    <span class="hljs-built_in">rcx</span>, [<span class="hljs-built_in">rip</span> + <span class="hljs-number">0x916c</span>]<br>    <span class="hljs-keyword">call</span>   <span class="hljs-number">0x1400012cb</span>                <span class="hljs-comment">; printf</span><br>    <span class="hljs-keyword">nop</span><br>    <span class="hljs-keyword">xor</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x30</span><br>    <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">ret</span><br>plus(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>):<br>    plus(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>):<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>], <span class="hljs-built_in">edx</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8</span>], <span class="hljs-built_in">ecx</span><br>    <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">ret</span><br></code></pre></td></tr></tbody></table></figure></div></div></div><div class="sect3"><h4 id="_函数调用分析">函数调用分析</h4><div class="paragraph"><p>函数的环境保存<br>会将一些寄存器的值保存到栈中, 以便在函数调用结束后恢复, 一个push对应一个pop</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span><br>....<br><span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>参数传递</p></div><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-number">0x2</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0x1</span><br><span class="hljs-keyword">call</span>   <span class="hljs-number">0x1400012c1</span>                <span class="hljs-comment">; plus(int,int)</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>将参数从右向左依次放入寄存器中, 然后调用函数<br>最后将返回值放入eax和栈中进行返回</p></div></div><div class="sect3"><h4 id="_函数内处理">函数内处理</h4><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">plus(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>):<br>    <span class="hljs-comment">; 将参数保存到栈中</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>], <span class="hljs-built_in">edx</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8</span>], <span class="hljs-built_in">ecx</span><br><br>    <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span>  <span class="hljs-comment">; 保存环境</span><br>    <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x10</span>  <span class="hljs-comment">; 为局部变量分配空间</span><br><br>    <span class="hljs-comment">; 从栈中取出参数, 经历过一次push, 一次sub</span><br>    <span class="hljs-comment">; 0x28 = 0x10(初始偏移) + 0x8(push) + 0x10(sub)</span><br>    <span class="hljs-comment">; 0x20 = 0x8(初始偏移) + 0x8(push) + 0x10(sub)</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br><br>    <span class="hljs-comment">; 计算放入eax</span><br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><br>    <span class="hljs-comment">; 将结果保存到栈中</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>]<br><br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x10</span> <span class="hljs-comment">; 恢复栈</span><br>    <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span>  <span class="hljs-comment">; 恢复环境</span><br>    <span class="hljs-keyword">ret</span><br></code></pre></td></tr></tbody></table></figure></div></div></div></div><div class="sect2"><h3 id="_2_多参数调用">2.多参数调用</h3><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> f, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> h)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> data = a + b + c + d + e + f + g + h;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div><div class="sect3"><h4 id="_调用方">调用方</h4><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">; 将后面4个参数放入栈中</span><br><span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x50</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x38</span>], <span class="hljs-number">0x8</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>], <span class="hljs-number">0x7</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>], <span class="hljs-number">0x6</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>], <span class="hljs-number">0x5</span><br><br><span class="hljs-comment">; 前4个参数放入寄存器</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r9d</span>, <span class="hljs-number">0x4</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">r8d</span>, <span class="hljs-number">0x3</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">edx</span>, <span class="hljs-number">0x2</span><br><span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0x1</span><br><span class="hljs-keyword">call</span>   <span class="hljs-number">0x14000117c</span><br></code></pre></td></tr></tbody></table></figure></div></div></div><div class="sect3"><h4 id="_函数内">函数内</h4><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">plus(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>):<br>    <span class="hljs-comment">; 将寄存器内的值转移到栈中</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>], <span class="hljs-built_in">r9d</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x18</span>], <span class="hljs-built_in">r8d</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x10</span>], <span class="hljs-built_in">edx</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x8</span>], <span class="hljs-built_in">ecx</span><br>    <span class="hljs-keyword">push</span>   <span class="hljs-built_in">rdi</span>                              <span class="hljs-comment">; 保存环境</span><br>    <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x10</span>                        <span class="hljs-comment">; 局部变量分配空间</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x28</span>]      <span class="hljs-comment">; 从栈中取出参数, 0x28 = 0x10(sub) + 0x8(push) + 0x10(初始偏移) = edx = 2</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x20</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x30</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x38</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x40</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x48</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x50</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span> + <span class="hljs-number">0x58</span>]<br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>], <span class="hljs-built_in">eax</span><br>    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rsp</span>]<br>    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">pop</span>    <span class="hljs-built_in">rdi</span><br>    <span class="hljs-keyword">ret</span><br></code></pre></td></tr></tbody></table></figure></div></div></div></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>学习</category>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>笔记</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x64汇编常用寄存器</title>
    <link href="/2024/07/25/x64%E6%B1%87%E7%BC%96%E5%B8%B8%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <url>/2024/07/25/x64%E6%B1%87%E7%BC%96%E5%B8%B8%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><table class="tableblock frame-all grid-all stretch"><thead><tr><th class="tableblock halign-left valign-top">寄存器</th><th class="tableblock halign-left valign-top">名称</th><th class="tableblock halign-left valign-top">描述</th></tr></thead><tbody><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RAX</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">累加器寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">运算/存储返回值</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RBX</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">基址寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">存储内存地址, 数据操作</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RCX</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">计数寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">常用于字符串和循环操作</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RDX</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">数据寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">常用于输入/输出操作</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RSI</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">源索引寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">常用于字符串操作</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RDI</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">目的索引寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">常用于字符串操作</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RBP</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">基址指针寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">指向栈底</p></td></tr><tr><td class="tableblock halign-left valign-top"><p class="tableblock">RSP</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">栈指针寄存器</p></td><td class="tableblock halign-left valign-top"><p class="tableblock">指向栈顶</p></td></tr></tbody></table></div></body></html>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>寄存器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过调用栈确定逻辑位置</title>
    <link href="/2024/07/13/%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8%E6%A0%88%E7%A1%AE%E5%AE%9A%E9%80%BB%E8%BE%91%E4%BD%8D%E7%BD%AE/"/>
    <url>/2024/07/13/%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8%E6%A0%88%E7%A1%AE%E5%AE%9A%E9%80%BB%E8%BE%91%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="通过调用栈确定逻辑位置"><a href="#通过调用栈确定逻辑位置" class="headerlink" title="通过调用栈确定逻辑位置"></a>通过调用栈确定逻辑位置</h1><ol><li>输入错误的名称和注册码, 点击注册后弹出注册失败的信息框后, 在od中暂停程序</li><li>切换到调用栈窗口, 寻找MessageBox的调用</li></ol><img src="/2024/07/13/%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8%E6%A0%88%E7%A1%AE%E5%AE%9A%E9%80%BB%E8%BE%91%E4%BD%8D%E7%BD%AE/1720875442030.png" class="" width="1720875442030"><p>对其进行跟踪目标可以看到其调用者</p><img src="/2024/07/13/%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8%E6%A0%88%E7%A1%AE%E5%AE%9A%E9%80%BB%E8%BE%91%E4%BD%8D%E7%BD%AE/1720875524081.png" class="" width="1720875524081"><p>可以看见程序断在 <code>call MessageBoxA</code>, 在MessageBoxA下下断, 点击继续运行并继续程序, 返回到程序点击信息框中的确定</p><img src="/2024/07/13/%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8%E6%A0%88%E7%A1%AE%E5%AE%9A%E9%80%BB%E8%BE%91%E4%BD%8D%E7%BD%AE/1720875771984.png" class="" width="1720875771984"><p>此时程序中断, 然后运行到程序领空, 即可看到对应逻辑位置</p><img src="/2024/07/13/%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8%E6%A0%88%E7%A1%AE%E5%AE%9A%E9%80%BB%E8%BE%91%E4%BD%8D%E7%BD%AE/1720875852358.png" class="" width="1720875852358">]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>学习</category>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向常见指令笔记</title>
    <link href="/2024/07/13/%E9%80%86%E5%90%91%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/13/%E9%80%86%E5%90%91%E5%B8%B8%E8%A7%81%E6%8C%87%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><div class="asciidoc-container"><div class="sect1"><h2 id="_test_eax_eax">test eax, eax</h2><div class="sectionbody"><div class="paragraph"><p>用来判断eax是否为0, 为0则跳转</p></div><div class="paragraph"><p>和 <code>cmp eax, 0</code> 在比较时几乎一样</p></div><div class="listingblock"><div class="content"><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (eax == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></tbody></table></figure></div></div></div></div><div class="sect1"><h2 id="_eax_eax_0_1_0">eax = eax == 0 ? 1 : 0</h2><div class="sectionbody"><div class="listingblock"><div class="content"><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">neg</span> <span class="hljs-built_in">eax</span>                  <span class="hljs-comment">; cf = if eax != 0 &#123; 1 &#125; else &#123; 0 &#125;</span><br><span class="hljs-keyword">sbb</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span>             <span class="hljs-comment">; eax = -cf</span><br><span class="hljs-keyword">inc</span> <span class="hljs-built_in">eax</span>                  <span class="hljs-comment">; eax = -cf + 1</span><br></code></pre></td></tr></tbody></table></figure></div></div><div class="paragraph"><p>总结:</p></div><div class="paragraph"><p><code>eax = eax == 0 ? 1 : 0</code></p></div><div class="paragraph"><p><code>cf = eax == 0 ? 1</code></p></div></div></div><div class="sect1"><h2 id="_lea_eax_rsp_0x20">lea eax, [rsp + 0x20]</h2><div class="sectionbody"><div class="paragraph"><p>相当于 <code>eax = rsp + 0x20</code>如果是mov的话, 是 <code>eax = [rsp + 0x20]</code></p></div></div></div></div></body></html>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>学习</category>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Imgui hook 注入 DirectX 和 OpenGL</title>
    <link href="/2024/02/12/Imgui-hook-%E6%B3%A8%E5%85%A5DirectX-%E5%92%8C-OpenGL/"/>
    <url>/2024/02/12/Imgui-hook-%E6%B3%A8%E5%85%A5DirectX-%E5%92%8C-OpenGL/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-Imgui-工作流程"><a href="#0x01-Imgui-工作流程" class="headerlink" title="0x01 Imgui 工作流程"></a>0x01 Imgui 工作流程</h1><p>Imgui 的工作流程简单来说分为下面三步:</p><ol><li>初始化</li><li>渲染</li><li>释放</li></ol><p>下面以D3d11 Imgui Example为例解释需要获取的参数:</p><h2 id="Imgui-初始化"><a href="#Imgui-初始化" class="headerlink" title="Imgui 初始化"></a>Imgui 初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 创建Windows</span><br>WNDCLASSEXW wc = &#123; <span class="hljs-built_in">sizeof</span>(wc), CS_CLASSDC, WndProc, <span class="hljs-number">0L</span>, <span class="hljs-number">0L</span>, <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-string">L&quot;ImGui Example&quot;</span>, <span class="hljs-literal">nullptr</span> &#125;;<br>::<span class="hljs-built_in">RegisterClassExW</span>(&amp;wc);<br>HWND hwnd = ::<span class="hljs-built_in">CreateWindowW</span>(wc.lpszClassName, <span class="hljs-string">L&quot;Dear ImGui DirectX11 Example&quot;</span>, WS_OVERLAPPEDWINDOW, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">800</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, wc.hInstance, <span class="hljs-literal">nullptr</span>);<br><br><span class="hljs-comment">// 创建d3d环境</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateDeviceD3D</span>(hwnd))<br>&#123;<br>    <span class="hljs-built_in">CleanupDeviceD3D</span>();<br>    ::<span class="hljs-built_in">UnregisterClassW</span>(wc.lpszClassName, wc.hInstance);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// Setup Dear ImGui context</span><br><span class="hljs-built_in">IMGUI_CHECKVERSION</span>();<br>ImGui::<span class="hljs-built_in">CreateContext</span>();<br>ImGuiIO&amp; io = ImGui::<span class="hljs-built_in">GetIO</span>(); (<span class="hljs-type">void</span>)io;<br>io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     <span class="hljs-comment">// Enable Keyboard Controls</span><br>io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      <span class="hljs-comment">// Enable Gamepad Controls</span><br><br><br><span class="hljs-comment">// Setup Platform/Renderer backends</span><br><span class="hljs-built_in">ImGui_ImplWin32_Init</span>(hwnd);<br><span class="hljs-built_in">ImGui_ImplDX11_Init</span>(g_pd3dDevice, g_pd3dDeviceContext);<br></code></pre></td></tr></table></figure><p>可以看出初始化需要 <code>ID3D11Device</code> 和 <code>ID3D11DeviceContext</code></p><h2 id="Imgui-渲染"><a href="#Imgui-渲染" class="headerlink" title="Imgui 渲染"></a>Imgui 渲染</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 改变大小</span><br><span class="hljs-keyword">if</span> (g_ResizeWidth != <span class="hljs-number">0</span> &amp;&amp; g_ResizeHeight != <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">CleanupRenderTarget</span>();<br>    g_pSwapChain-&gt;<span class="hljs-built_in">ResizeBuffers</span>(<span class="hljs-number">0</span>, g_ResizeWidth, g_ResizeHeightDXGI_FORMAT_UNKNOWN, <span class="hljs-number">0</span>);<br>    g_ResizeWidth = g_ResizeHeight = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">CreateRenderTarget</span>();<br>&#125;<br><br><span class="hljs-comment">// 渲染初始化</span><br><span class="hljs-built_in">ImGui_ImplDX11_NewFrame</span>();<br><span class="hljs-built_in">ImGui_ImplWin32_NewFrame</span>();<br>ImGui::<span class="hljs-built_in">NewFrame</span>();<br><br><span class="hljs-comment">// 渲染</span><br>&#123;<br>    ImGui::<span class="hljs-built_in">Begin</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    ImGui::<span class="hljs-built_in">End</span>();<br>&#125;<br><br><span class="hljs-comment">// 渲染结束</span><br>ImGui::<span class="hljs-built_in">Render</span>();<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> clear_color_with_alpha[<span class="hljs-number">4</span>] = &#123; clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w &#125;;<br>g_pd3dDeviceContext-&gt;<span class="hljs-built_in">OMSetRenderTargets</span>(<span class="hljs-number">1</span>, &amp;g_mainRenderTargetView, <span class="hljs-literal">nullptr</span>);<br>g_pd3dDeviceContext-&gt;<span class="hljs-built_in">ClearRenderTargetView</span>(g_mainRenderTargetView, clear_color_with_alpha);<br><span class="hljs-built_in">ImGui_ImplDX11_RenderDrawData</span>(ImGui::<span class="hljs-built_in">GetDrawData</span>())<br>g_pSwapChain-&gt;<span class="hljs-built_in">Present</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// Present with vsync</span><br></code></pre></td></tr></table></figure><p>可以看出渲染将Imgui的数据写入 <code>ID3D11DeviceContext</code>后 调用 <code>IDXGISwapChain</code> 的 <code>Present</code> 函数</p><h2 id="Imgui-清理"><a href="#Imgui-清理" class="headerlink" title="Imgui 清理"></a>Imgui 清理</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ImGui_ImplDX11_Shutdown</span>();<br><span class="hljs-built_in">ImGui_ImplWin32_Shutdown</span>();<br>ImGui::<span class="hljs-built_in">DestroyContext</span>();<br><br><span class="hljs-built_in">CleanupDeviceD3D</span>();<br></code></pre></td></tr></table></figure><h1 id="0x02-Imgui-hook"><a href="#0x02-Imgui-hook" class="headerlink" title="0x02 Imgui hook"></a>0x02 Imgui hook</h1><p>如果要在界面上显示我们自己的 Imgui 内容, 那么必须要在渲染完毕之前注入我们自定义渲染逻辑</p><ul><li>在Dx11中, 渲染完毕函数为 <code>IDXGISwapChain::Present</code></li><li>在Dx9中, 渲染完毕为 <code>LPDIRECT3DDEVICE9::EndScene</code></li><li>在OpenGL中, 渲染完毕为 <code>SwapBuffers</code></li></ul><p>只需要hook这几个函数, 将我们的渲染逻辑注入即可</p><h2 id="DirectX-hook"><a href="#DirectX-hook" class="headerlink" title="DirectX hook"></a>DirectX hook</h2><p>在DirectX中, <code>Present</code> 和 <code>EndScene</code> 均为类中的成员, 这种hook通常通过虚函数表的方式进行hook</p><p>为了获取函数的位置, 我们得手动创建一个D3d对象, 对于D3d11, 我们需要创建 <code>IDXGISwapChain</code>, 对于D3d9, 需要创建 <code>LPDIRECT3DDEVICE9</code></p><p>D3d9</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">GetDx9VTable</span><span class="hljs-params">(HWND hwnd, <span class="hljs-type">void</span> **v_table, <span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    Microsoft::WRL::ComPtr&lt;IDirect3DDevice9&gt; device;<br>    Microsoft::WRL::ComPtr&lt;IDirect3D9&gt; d3d = <span class="hljs-built_in">Direct3DCreate9</span>(D3D_SDK_VERSION);<br>    D3DPRESENT_PARAMETERS d3dpp = &#123;&#125;;<br>    d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;<br>    d3dpp.hDeviceWindow = hwnd;<br>    d3dpp.Windowed = (<span class="hljs-built_in">GetWindowLongPtr</span>(hwnd, GWL_STYLE) &amp; WS_POPUP) == <span class="hljs-number">0</span>;<br><br>    HRESULT hresult = d3d-&gt;<span class="hljs-built_in">CreateDevice</span>(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hwnd,<br>                                        D3DCREATE_SOFTWARE_VERTEXPROCESSING, &amp;d3dpp, device.<span class="hljs-built_in">GetAddressOf</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hresult)) &#123;<br>        <span class="hljs-built_in">DxTrace</span>(hresult);<br>        d3dpp.Windowed = !d3dpp.Windowed;<br>        hresult = d3d-&gt;<span class="hljs-built_in">CreateDevice</span>(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hwnd,<br>                                    D3DCREATE_SOFTWARE_VERTEXPROCESSING, &amp;d3dpp, device.<span class="hljs-built_in">GetAddressOf</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hresult)) &#123;<br>        <span class="hljs-built_in">DxTrace</span>(hresult, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-built_in">memcpy</span>(v_table, *(<span class="hljs-type">void</span> ***) device.<span class="hljs-built_in">Get</span>(), size);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>D3d11</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetDx11VTable</span><span class="hljs-params">(HWND hwnd, <span class="hljs-type">void</span> **v_table, <span class="hljs-type">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    DXGI_SWAP_CHAIN_DESC sd;<br>    <span class="hljs-built_in">ZeroMemory</span>(&amp;sd, <span class="hljs-built_in">sizeof</span>(sd));<br>    sd.BufferCount = <span class="hljs-number">2</span>;<br>    sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;<br>    sd.BufferDesc.RefreshRate.Numerator = <span class="hljs-number">60</span>;<br>    sd.BufferDesc.RefreshRate.Denominator = <span class="hljs-number">1</span>;<br>    sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;<br>    sd.OutputWindow = hwnd;<br>    sd.SampleDesc.Count = <span class="hljs-number">1</span>;<br>    sd.SampleDesc.Quality = <span class="hljs-number">0</span>;<br>    sd.Windowed = (<span class="hljs-built_in">GetWindowLongPtr</span>(sd.OutputWindow, GWL_STYLE) &amp; WS_POPUP) == <span class="hljs-number">0</span>;<br>    sd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;<br><br>    Microsoft::WRL::ComPtr&lt;ID3D11Device&gt; d3d_device;<br>    Microsoft::WRL::ComPtr&lt;IDXGISwapChain&gt; d3d_swap_chain;<br><br>    HRESULT hresult = <span class="hljs-built_in">D3D11CreateDeviceAndSwapChain</span>(<br>            <span class="hljs-literal">nullptr</span>,<br>            D3D_DRIVER_TYPE_HARDWARE,<br>            <span class="hljs-literal">nullptr</span>,<br>            <span class="hljs-number">0</span>,<br>            <span class="hljs-literal">nullptr</span>,<br>            <span class="hljs-number">0</span>,<br>            D3D11_SDK_VERSION,<br>            &amp;sd,<br>            d3d_swap_chain.<span class="hljs-built_in">GetAddressOf</span>(),<br>            d3d_device.<span class="hljs-built_in">GetAddressOf</span>(),<br>            <span class="hljs-literal">nullptr</span>,<br>            <span class="hljs-literal">nullptr</span><br>    );<br>    <span class="hljs-keyword">if</span> (hresult == DXGI_ERROR_UNSUPPORTED) &#123;<br>        hresult = <span class="hljs-built_in">D3D11CreateDeviceAndSwapChain</span>(<br>                <span class="hljs-literal">nullptr</span>,<br>                D3D_DRIVER_TYPE_WARP,<br>                <span class="hljs-literal">nullptr</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-literal">nullptr</span>,<br>                <span class="hljs-number">0</span>,<br>                D3D11_SDK_VERSION,<br>                &amp;sd,<br>                d3d_swap_chain.<span class="hljs-built_in">GetAddressOf</span>(),<br>                d3d_device.<span class="hljs-built_in">GetAddressOf</span>(),<br>                <span class="hljs-literal">nullptr</span>,<br>                <span class="hljs-literal">nullptr</span><br>        );<br>    &#125;<br>    <span class="hljs-built_in">HR</span>(hresult)<br>    <span class="hljs-built_in">memcpy</span>(v_table, *(<span class="hljs-type">void</span> ***) (d3d_swap_chain.<span class="hljs-built_in">Get</span>()), size);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>他们都有三个参数</p><ul><li><code>HWND</code>: 当前窗口句柄</li><li><code>v_table</code>: 虚表列表</li><li><code>size</code>: 虚表大小</li></ul><p>大小和偏移可由文档获取</p><p>获取 <code>HWND</code> 代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL CALLBACK <span class="hljs-title">EnumWindowsProc</span><span class="hljs-params">(HWND hwnd, LPARAM lParam)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD lpdwProcessId;<br>    <span class="hljs-built_in">GetWindowThreadProcessId</span>(hwnd, &amp;lpdwProcessId);<br>    <span class="hljs-keyword">if</span> (lpdwProcessId == <span class="hljs-built_in">GetCurrentProcessId</span>()) &#123;<br>        HWND *pWnd = <span class="hljs-built_in">reinterpret_cast</span>&lt;HWND *&gt;(lParam);<br>        <span class="hljs-keyword">if</span> (pWnd) &#123;<br>            *pWnd = hwnd;<br>        &#125;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br><span class="hljs-function">HWND <span class="hljs-title">win32::GetProcessWindow</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HWND h_wnd_ = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-built_in">EnumWindows</span>(EnumWindowsProc, <span class="hljs-built_in">reinterpret_cast</span>&lt;LPARAM&gt;(&amp;h_wnd_));<br>    <span class="hljs-keyword">return</span> h_wnd_;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取到虚表后, 便可以定义方法的签名, 类中的方法有一个隐藏的参数 <code>this</code>, 则签名如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// d3d9</span><br><span class="hljs-keyword">using</span> FuncEndScene = <span class="hljs-built_in">HRESULT</span>(APIENTRY *)(LPDIRECT3DDEVICE9 pDevice)<br><br><span class="hljs-comment">// d3d11</span><br><span class="hljs-keyword">using</span> FuncPresent = <span class="hljs-built_in">HRESULT</span>(APIENTRY *)(IDXGISwapChain *p_this, UINT sync_interval, UINT flag)<br></code></pre></td></tr></table></figure><p>随后就可以保存其记录的地址了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// d3d9</span><br>hwnd_ = <span class="hljs-built_in">GetProcessWindow</span>();<br><span class="hljs-type">void</span> *v_table[<span class="hljs-number">119</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetDx9VTable</span>(hwnd_, v_table, <span class="hljs-built_in">sizeof</span>(v_table))) &#123;<br>    <span class="hljs-built_in">SPDLOG_ERROR</span>(<span class="hljs-string">&quot;GetDx9VTable failed&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>vfun_end_scene_ = (FuncEndScene) v_table[<span class="hljs-number">42</span>];<br><br><span class="hljs-comment">// d3d11</span><br>hwnd_ = <span class="hljs-built_in">GetProcessWindow</span>();<br><span class="hljs-keyword">if</span> (!hwnd_) &#123;<br>    <span class="hljs-built_in">SPDLOG_ERROR</span>(<span class="hljs-string">&quot;Failed to get process window&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">void</span> *d3d11_swap_chain[<span class="hljs-number">40</span>];<br><span class="hljs-built_in">GetDx11VTable</span>(hwnd_, d3d11_swap_chain, <span class="hljs-built_in">sizeof</span>(d3d11_swap_chain));<br>vfun_present_ = (FuncPresent) d3d11_swap_chain[<span class="hljs-number">8</span>];<br></code></pre></td></tr></table></figure><p>获取到地址后即可对相应函数进行Hook, 其中 <code>HookPresent</code> 为要被替代的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">DetourTransactionBegin</span>();<br><span class="hljs-built_in">DetourUpdateThread</span>(<span class="hljs-built_in">GetCurrentThread</span>());<br><span class="hljs-built_in">DetourAttach</span>(&amp;(PVOID &amp;) vfun_present_, HookPresent);<br><span class="hljs-built_in">DetourTransactionCommit</span>();<br><br></code></pre></td></tr></table></figure><h2 id="OpenGL-hook"><a href="#OpenGL-hook" class="headerlink" title="OpenGL hook"></a>OpenGL hook</h2><p>OpenGL的相对来说更简单, 因为 <code>SwapBuffers</code>是一个全局函数, 可以直接获取其地址, 而不用找虚函数表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> FuncWglSwapBuffer = <span class="hljs-built_in">BOOL</span>(WINAPI *)(HDC hDc);<br>HMODULE h_module = <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-string">L&quot;opengl32.dll&quot;</span>)<br>vfun_wgl_swap_buffer_ = (FuncWglSwapBuffer) <span class="hljs-built_in">GetProcAddress</span>(h_module, <span class="hljs-string">&quot;wglSwapBuffers&quot;</span>);<br><br><span class="hljs-built_in">DetourTransactionBegin</span>();<br><span class="hljs-built_in">DetourUpdateThread</span>(<span class="hljs-built_in">GetCurrentThread</span>());<br><span class="hljs-built_in">DetourDetach</span>(&amp;(PVOID &amp;) vfun_wgl_swap_buffer_, HookWglSwapBuffer);<br><span class="hljs-built_in">DetourTransactionCommit</span>();<br></code></pre></td></tr></table></figure><h1 id="0x03-Imgui-初始化和渲染"><a href="#0x03-Imgui-初始化和渲染" class="headerlink" title="0x03 Imgui 初始化和渲染"></a>0x03 Imgui 初始化和渲染</h1><p>替换掉渲染函数后, 就可以对Imgui初始化了, 由于渲染函数会调用多次, 但是初始化只能初始化一次, 所以其流程为</p><ol><li>判断是否初始化, 如果初始化则初始化</li><li>Imgui NewFrame</li><li>绘制</li><li>绘制结束</li><li>调用原函数完成绘制</li></ol><h2 id="D3d11"><a href="#D3d11" class="headerlink" title="D3d11"></a>D3d11</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HRESULT <span class="hljs-title">ImguiD311Impl::HookPresent</span><span class="hljs-params">(IDXGISwapChain *swap_chain, UINT sync_interval, UINT flags)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (d3d_swap_chain_ == <span class="hljs-literal">nullptr</span>)<br>        d3d_swap_chain_ = swap_chain;<br>    <span class="hljs-keyword">if</span> (!is_initialized_)<br>        <span class="hljs-built_in">InitImgui</span>();<br><br>    <span class="hljs-built_in">ImGui_ImplDX11_NewFrame</span>();<br><br>    <span class="hljs-built_in">DrawFrame</span>();<br><br>    <span class="hljs-built_in">ImGui_ImplDX11_RenderDrawData</span>(ImGui::<span class="hljs-built_in">GetDrawData</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">vfun_present_</span>(swap_chain, sync_interval, flags);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImguiD311Impl::InitImgui</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">SPDLOG_INFO</span>(<span class="hljs-string">&quot;ImguiD311Impl::InitImgui()&quot;</span>);<br>    ImGui::<span class="hljs-built_in">CreateContext</span>();<br>    ImGuiIO &amp;io = ImGui::<span class="hljs-built_in">GetIO</span>();<br>    (<span class="hljs-type">void</span>) io;<br>    io.IniFilename = <span class="hljs-literal">nullptr</span>;<br>    io.Fonts-&gt;<span class="hljs-built_in">AddFontFromFileTTF</span>(<span class="hljs-string">R&quot;(c:\Windows\Fonts\msyh.ttc)&quot;</span>, <span class="hljs-number">18.0f</span>, <span class="hljs-literal">nullptr</span>, io.Fonts-&gt;<span class="hljs-built_in">GetGlyphRangesChineseFull</span>());<br><br>    <span class="hljs-built_in">ImGui_ImplWin32_Init</span>(hwnd_);<br><br>    d3d_swap_chain_-&gt;<span class="hljs-built_in">GetDevice</span>(__uuidof(ID3D11Device), (<span class="hljs-type">void</span> **) &amp;d3d_device_);<br>    d3d_device_-&gt;<span class="hljs-built_in">GetImmediateContext</span>(&amp;d3d_device_context_);<br><br>    <span class="hljs-built_in">ImGui_ImplDX11_Init</span>(d3d_device_, d3d_device_context_);<br>    is_initialized_ = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D3d9"><a href="#D3d9" class="headerlink" title="D3d9"></a>D3d9</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HRESULT <span class="hljs-title">ImguiD39Impl::HookEndScene</span><span class="hljs-params">(LPDIRECT3DDEVICE9 pDevice)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (d3d_device_ == <span class="hljs-literal">nullptr</span>)<br>        d3d_device_ = pDevice;<br>    <span class="hljs-keyword">if</span> (!is_initialized_)<br>        <span class="hljs-built_in">InitImgui</span>();<br><br>    <span class="hljs-built_in">ImGui_ImplDX9_NewFrame</span>();<br>    <span class="hljs-built_in">DrawFrame</span>();<br>    <span class="hljs-built_in">ImGui_ImplDX9_RenderDrawData</span>(ImGui::<span class="hljs-built_in">GetDrawData</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">vfun_end_scene_</span>(pDevice);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImguiD39Impl::InitImgui</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">SPDLOG_INFO</span>(<span class="hljs-string">&quot;ImguiD39Impl::InitImgui()&quot;</span>);<br>    D3DDEVICE_CREATION_PARAMETERS d3d_creation_parameters;<br>    d3d_device_-&gt;<span class="hljs-built_in">GetCreationParameters</span>(&amp;d3d_creation_parameters);<br>    ImGui::<span class="hljs-built_in">CreateContext</span>();<br>    ImGuiIO &amp;io = ImGui::<span class="hljs-built_in">GetIO</span>();<br>    (<span class="hljs-type">void</span>) io;<br>    io.IniFilename = <span class="hljs-literal">nullptr</span>;<br>    io.Fonts-&gt;<span class="hljs-built_in">AddFontFromFileTTF</span>(<span class="hljs-string">R&quot;(c:\Windows\Fonts\msyh.ttc)&quot;</span>, <span class="hljs-number">18.0f</span>, <span class="hljs-literal">nullptr</span>, io.Fonts-&gt;<span class="hljs-built_in">GetGlyphRangesChineseFull</span>());<br><br>    <span class="hljs-built_in">ImGui_ImplWin32_Init</span>(hwnd_);<br>    <span class="hljs-built_in">ImGui_ImplDX9_Init</span>(d3d_device_);<br><br>    is_initialized_ = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">ImGuiOpenGLImpl::HookWglSwapBuffer</span><span class="hljs-params">(HDC hdc)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!hwnd_)<br>        hwnd_ = <span class="hljs-built_in">WindowFromDC</span>(hdc);<br>    <span class="hljs-keyword">if</span> (!is_initialized_)<br>        <span class="hljs-built_in">InitImgui</span>();<br>  <br>    <span class="hljs-built_in">ImGui_ImplOpenGL3_NewFrame</span>();<br>    <span class="hljs-built_in">ImGui_ImplWin32_NewFrame</span>();<br>    <span class="hljs-built_in">DrawFrame</span>();<br>    <span class="hljs-built_in">ImGui_ImplOpenGL3_RenderDrawData</span>(ImGui::<span class="hljs-built_in">GetDrawData</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">vfun_wgl_swap_buffer_</span>(hdc);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ImGuiOpenGLImpl::InitImgui</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    __try<br>    &#123;<br>        <span class="hljs-built_in">SPDLOG_INFO</span>(<span class="hljs-string">&quot;ImGuiOpenGLImpl::InitImgui()&quot;</span>);<br>        ImGui::<span class="hljs-built_in">CreateContext</span>();<br>        ImGuiIO &amp;io = ImGui::<span class="hljs-built_in">GetIO</span>();<br>        (<span class="hljs-type">void</span>) io;<br>        io.IniFilename = <span class="hljs-literal">nullptr</span>;<br>        io.Fonts-&gt;<span class="hljs-built_in">AddFontFromFileTTF</span>(<span class="hljs-string">R&quot;(c:\Windows\Fonts\msyh.ttc)&quot;</span>, <span class="hljs-number">18.0f</span>, <span class="hljs-literal">nullptr</span>,<br>                                     io.Fonts-&gt;<span class="hljs-built_in">GetGlyphRangesChineseFull</span>());<br>        <span class="hljs-built_in">ImGui_ImplWin32_InitForOpenGL</span>(hwnd_);<br>        <span class="hljs-built_in">ImGui_ImplOpenGL3_Init</span>();<br>        is_initialized_ = <span class="hljs-literal">true</span>;<br>    &#125;<br>    __except(EXCEPTION_EXECUTE_HANDLER)<br>    &#123;<br>        <span class="hljs-built_in">SPDLOG_ERROR</span>(<span class="hljs-string">&quot;Failed to init imgui, exception code: &#123;:#x&#125;&quot;</span>, <span class="hljs-built_in">GetExceptionCode</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到逻辑基本上一致, 只有不同平台的Imgui接口不同</p><p>至此, Imgui的dll被注入后就可以显示出基础ui了, 完整代码可以在<a href="https://github.com/simonkimi/imgui_hook_demo">github</a>上查看到</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>Imgui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向call栈追踪</title>
    <link href="/2024/01/12/%E9%80%86%E5%90%91call%E6%A0%88%E8%BF%BD%E8%B8%AA/"/>
    <url>/2024/01/12/%E9%80%86%E5%90%91call%E6%A0%88%E8%BF%BD%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>在函数调用时, 使用栈传递参数, 其汇编如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push 参数2<br>push 参数1<br>call xxxxx<br></code></pre></td></tr></table></figure><p>调用call后, 会将返回地址也压入栈中, 此时栈中结构如下</p><table><thead><tr><th>esp</th><th>返回地址</th></tr></thead><tbody><tr><td>esp+4</td><td>参数1</td></tr><tr><td>esp+8</td><td>参数2</td></tr></tbody></table><h2 id="函数开头push的作用"><a href="#函数开头push的作用" class="headerlink" title="函数开头push的作用"></a>函数开头push的作用</h2><h3 id="1-局部变量开辟"><a href="#1-局部变量开辟" class="headerlink" title="1. 局部变量开辟"></a>1. 局部变量开辟</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">push xxx<br>sub esp, 0x10<br></code></pre></td></tr></table></figure><h3 id="2-保存寄存器"><a href="#2-保存寄存器" class="headerlink" title="2. 保存寄存器"></a>2. 保存寄存器</h3><p>查看call的结尾, 查找对应的pop, 一个push对应一个pop</p><h3 id="3-下一个call的参数"><a href="#3-下一个call的参数" class="headerlink" title="3. 下一个call的参数"></a>3. 下一个call的参数</h3><p>对call进行下断, 查看call执行完毕后栈内内存收缩大小, 即为call的参数大小<br>比如 call 缩小了4个字节, 那么call的参数为 4 &#x2F; 4 &#x3D; 1个参数</p><h2 id="函数内部esp和ebp的操作"><a href="#函数内部esp和ebp的操作" class="headerlink" title="函数内部esp和ebp的操作"></a>函数内部esp和ebp的操作</h2><h3 id="1-ebp分析"><a href="#1-ebp分析" class="headerlink" title="1. ebp分析"></a>1. ebp分析</h3><p>特征: call下有如下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">push ebp<br>mov ebp, esp<br>sub esp, 0x10<br></code></pre></td></tr></table></figure><p>执行后栈中结构如下</p><table><thead><tr><th>相对位置</th><th>栈</th></tr></thead><tbody><tr><td>ebp-0x10</td><td>开辟的局部空间</td></tr><tr><td>ebp</td><td>原来的ebp</td></tr><tr><td>ebp+4</td><td>返回地址</td></tr><tr><td>ebp+8</td><td>参数1</td></tr><tr><td>ebp+C</td><td>参数2</td></tr></tbody></table><h4 id="1-如果xx很大-或者esp和ebp的差值很大"><a href="#1-如果xx很大-或者esp和ebp的差值很大" class="headerlink" title="1. 如果xx很大, 或者esp和ebp的差值很大"></a>1. 如果xx很大, 或者esp和ebp的差值很大</h4><p>那么ebp很可能时一个普通寄存器, 不能追</p><h4 id="2-xx-0-xx比较小"><a href="#2-xx-0-xx比较小" class="headerlink" title="2. xx &gt; 0, xx比较小"></a>2. xx &gt; 0, xx比较小</h4><p>xx为参数, 参数为 (xx - 4) &#x2F; 4, 例如ebp+8为参数1, ebp+C为参数2, 追踪参数即可</p><h4 id="3-xx-0-xx比较小"><a href="#3-xx-0-xx比较小" class="headerlink" title="3. xx &lt; 0, xx比较小"></a>3. xx &lt; 0, xx比较小</h4><p>说明为栈内局部变量, 其变量值为 xx &#x2F; 4, 例如ebp-4为局部变量1, ebp-8为局部变量2<br>追汇编位置到call开始位置</p><h4 id="4-edp-和-edp-4"><a href="#4-edp-和-edp-4" class="headerlink" title="4. edp 和 edp + 4"></a>4. edp 和 edp + 4</h4><p>正常情况不会出现, 很有可能为检测函数</p><h3 id="esp分析"><a href="#esp分析" class="headerlink" title="esp分析"></a>esp分析</h3><p>对于esp + xx, 首先查看其在栈中的位置, 确定其相对于返回地址的位置</p><h4 id="1-如果在返回地址之下"><a href="#1-如果在返回地址之下" class="headerlink" title="1. 如果在返回地址之下&#96;"></a>1. 如果在返回地址之下&#96;</h4><p>数据为参数, 直接去call位置找参数即可</p><h4 id="2-如果在返回地址之上"><a href="#2-如果在返回地址之上" class="headerlink" title="2. 如果在返回地址之上"></a>2. 如果在返回地址之上</h4><p>那么为局部变量</p><p>会导致esp变化的指令</p><table><thead><tr><th>指令</th><th>说明</th><th>变动</th></tr></thead><tbody><tr><td>sub esp, n; push eax;</td><td>打开一个地址并写入值</td><td>-n</td></tr><tr><td>pop eax; add esp, 4;</td><td>关闭一个地址</td><td>+n</td></tr><tr><td>add esp, 4;</td><td>关闭一个地址</td><td>+n</td></tr><tr><td>sub esp, 4;</td><td>打开一个地址</td><td>-n</td></tr><tr><td>call xxx;   无对应ret</td><td>调用数据</td><td>+4</td></tr><tr><td>ret; ret n;</td><td>关闭n个地址</td><td>-4  -n</td></tr></tbody></table><h4 id="3-如果就为返回地址"><a href="#3-如果就为返回地址" class="headerlink" title="3. 如果就为返回地址"></a>3. 如果就为返回地址</h4><p>那么为检测代码</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>学习</category>
      
      <category>栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Flutter项目使用FFI调用Golang项目全记录</title>
    <link href="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前有一个项目涉及到html的解析, js执行等. 由于dart的库并不是很完善, 于是打算使用golang来实现这部分功能, 然而在过程中遇到了许多坑, 特此记录过程</p><h2 id="0x01-go代码编写"><a href="#0x01-go代码编写" class="headerlink" title="0x01 go代码编写"></a>0x01 go代码编写</h2><p>这里使用go的<a href="https://github.com/robertkrimen/otto">otto</a>做一个javascript解析器, 项目代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br><span class="hljs-comment">struct JsResult &#123;</span><br><span class="hljs-comment">char* result;</span><br><span class="hljs-comment">int len;</span><br><span class="hljs-comment">int err;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/robertkrimen/otto&quot;</span><br><span class="hljs-string">&quot;unsafe&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>&#125;<br><br><span class="hljs-keyword">type</span> JsResult C.struct_JsResult<br><br><span class="hljs-comment">//export RunJs</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RunJs</span><span class="hljs-params">(input *C.char)</span></span> JsResult &#123;<br>res := C.GoString(input) <span class="hljs-comment">// *C.char -&gt; string</span><br><br>vm := otto.New()<br>result, err := vm.Run(res)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>errMsg := err.Error()<br><span class="hljs-keyword">return</span> JsResult&#123;<br>result: (*C.char)(C.CString(errMsg)),<br>err:    <span class="hljs-number">1</span>,<br><span class="hljs-built_in">len</span>:    C.<span class="hljs-type">int</span>(<span class="hljs-built_in">len</span>(errMsg)),<br>&#125;<br>&#125;<br><br>str := result.String()<br><span class="hljs-keyword">return</span> JsResult&#123;<br>result: (*C.char)(C.CString(str)), <span class="hljs-comment">// string -&gt; *C.char</span><br>err:    <span class="hljs-number">0</span>,<br><span class="hljs-built_in">len</span>:    C.<span class="hljs-type">int</span>(<span class="hljs-built_in">len</span>(str)),<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//export FreeResult</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FreeResult</span><span class="hljs-params">(result JsResult)</span></span>  &#123;<br>C.free(unsafe.Pointer(result.result))<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项:</p><ul><li><code>package main</code>不能改动, 必须为main</li><li>由于go有gc, 所以函数的返回值必须为c语言结构, 否则会报错</li><li><code>import &quot;C&quot;</code>和上面的C语言代码中间不能有空行</li><li><code>//export RunJs</code>的 <code>//</code>和 <code>export</code>中间不能有空格(虽然不少编程规范推荐有空格)</li><li><code>C.CString</code>和 <code>C.CBytes</code>用完需要释放</li></ul><h2 id="0x02-编译go代码"><a href="#0x02-编译go代码" class="headerlink" title="0x02 编译go代码"></a>0x02 编译go代码</h2><ol><li>安装NDK, 这里我使用Android Studio的SDK Manager进行安装</li></ol><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873197004.png" class="" width="1708873197004"><ol start="2"><li>使用下面脚本, 进行构建(build.cmd)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> ANDROID_NDK_HOME=G:\SDK\AndroidSDK\ndk\24.0.7956693<br><br><span class="hljs-built_in">set</span> GOARCH=arm<br><span class="hljs-built_in">set</span> GOOS=android<br><span class="hljs-built_in">set</span> CGO_ENABLED=1<br><span class="hljs-built_in">set</span> CC=%ANDROID_NDK_HOME%\toolchains\llvm\prebuilt\windows-x86_64\bin\armv7a-linux-androideabi21-clang<br>go build -ldflags <span class="hljs-string">&quot;-w -s&quot;</span> -buildmode=c-shared -o ./bin/armeabi-v7a/libgo.so ./main.go<br><span class="hljs-built_in">echo</span> Build armeabi-v7a finish<br><br><span class="hljs-built_in">set</span> GOARCH=arm64<br><span class="hljs-built_in">set</span> GOOS=android<br><span class="hljs-built_in">set</span> CGO_ENABLED=1<br><span class="hljs-built_in">set</span> CC=%ANDROID_NDK_HOME%\toolchains\llvm\prebuilt\windows-x86_64\bin\aarch64-linux-android21-clang<br>go build -ldflags <span class="hljs-string">&quot;-w -s&quot;</span> -buildmode=c-shared -o ./bin/arm64-v8a/libgo.so ./main.go<br><span class="hljs-built_in">echo</span> Build arm64-v8a finish<br><br><span class="hljs-built_in">set</span> GOARCH=amd64<br><span class="hljs-built_in">set</span> GOOS=android<br><span class="hljs-built_in">set</span> CGO_ENABLED=1<br><span class="hljs-built_in">set</span> CC=%ANDROID_NDK_HOME%\toolchains\llvm\prebuilt\windows-x86_64\bin\x86_64-linux-android24-clang<br>go build -ldflags <span class="hljs-string">&quot;-w -s&quot;</span> -buildmode=c-shared -o ./bin/x86_64/libgo.so ./main.go<br><span class="hljs-built_in">echo</span> Build x86_64 finish<br><br><br><span class="hljs-built_in">set</span> GOARCH=386<br><span class="hljs-built_in">set</span> GOOS=android<br><span class="hljs-built_in">set</span> CGO_ENABLED=1<br><span class="hljs-built_in">set</span> CC=%ANDROID_NDK_HOME%\toolchains\llvm\prebuilt\windows-x86_64\bin\i686-linux-android24-clang<br>go build -ldflags <span class="hljs-string">&quot;-w -s&quot;</span> -buildmode=c-shared -o ./bin/x86/libgo.so ./main.go<br><span class="hljs-built_in">echo</span> Build x86 finish<br></code></pre></td></tr></table></figure><p>其中 <code>ANDROID_NDK_HOME</code>替换为NDK安装目录, 这四段程序分别生成 <code>armeabi-v7a</code>(老安卓设备),<code>arm64-v8a</code>(新安卓设备), <code>x86_64</code>(不常见), <code>x86</code>(模拟器常见). 其他设备请自行查阅go编译选项修改 <code>GOARCH</code>和 <code>GOOS</code></p><p>此时会生成bin文件夹, 里面有4个平台的依赖库, 请按照需求自行删减</p><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873231806.png" class="" width="1708873231806"><h2 id="0x03-导入so文件"><a href="#0x03-导入so文件" class="headerlink" title="0x03 导入so文件"></a>0x03 导入so文件</h2><p>将4个文件夹复制到android的libs目录中(如果没有则新建一个), .h文件可以删除</p><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873347977.png" class="" width="1708873347977"><p>修改 <code>build.gradle</code>文件, 在 <code>sourceSets</code>中添加 <code>main.jniLibs.srcDirs = [&#39;libs&#39;]</code>后build即可</p><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873363232.png" class="" width="1708873363232"><h2 id="0x03-FFI绑定"><a href="#0x03-FFI绑定" class="headerlink" title="0x03 FFI绑定"></a>0x03 FFI绑定</h2><p>这里推荐使用 <a href="https://pub.flutter-io.cn/packages/ffigen">ffigen</a> , 具体请参照<a href="https://pub.flutter-io.cn/packages/ffigen">文档</a></p><p>将刚才build出来的 <code>libgo.h</code>复制到任意目录下(我这里是ffi), 参照ffigen的文档进行配置, 我的配置如下</p><p>随后将会生成如图 <code>libgo.h.dart</code></p><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873370083.png" class="" width="1708873370083"><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873375810.png" class="" width="1708873375810"><p>随后编写dart -&gt; c 与 c -&gt; dart逻辑进行绑定</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;libgo.h.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:ffi/ffi.dart&#x27;</span> <span class="hljs-keyword">as</span> ffi;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:ffi&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FFi</span> </span>&#123;<br>  FFi._();<br><br>  <span class="hljs-keyword">final</span> _native = NativeLibrary(DynamicLibrary.open(<span class="hljs-string">&#x27;libgo.so&#x27;</span>));<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> FFi _instant = FFi._();<br><br>  <span class="hljs-keyword">factory</span> FFi() =&gt; _instant;<br><br>  <span class="hljs-built_in">String</span> runJs(<span class="hljs-built_in">String</span> input) &#123;<br>    <span class="hljs-comment">// input</span><br>    <span class="hljs-keyword">final</span> raw = input.codeUnits;<br>    <span class="hljs-keyword">final</span> buffer = ffi.malloc.allocate&lt;Int8&gt;(raw.length + <span class="hljs-number">1</span>);<br>    buffer.asTypedList(raw.length + <span class="hljs-number">1</span>)<br>      ..setAll(<span class="hljs-number">0</span>, raw)<br>      ..[raw.length] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">final</span> result = _native.RunJs(buffer);<br><br>    <span class="hljs-keyword">final</span> message = <span class="hljs-built_in">String</span>.fromCharCodes(result.result.asTypedList(result.len));<br>    <span class="hljs-keyword">final</span> error = result.err;<br><br>    <span class="hljs-comment">// free</span><br>    ffi.malloc.free(buffer);<br>    _native.FreeResult(result);<br><br>    <span class="hljs-keyword">if</span> (error != <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> Exception(message);<br>    <span class="hljs-keyword">return</span> message;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简单写个界面测试下, 测试通过收工</p><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873406752.png" class="" width="1708873406752"><img src="/2022/02/03/%E5%9C%A8Flutter%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8FFI%E8%B0%83%E7%94%A8Golang%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%AE%B0%E5%BD%95/1708873386203.png" class="" width="1708873386203">]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>flutter</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用Github Action自动部署</title>
    <link href="/2022/01/30/Hexo%E4%BD%BF%E7%94%A8Github-Action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/01/30/Hexo%E4%BD%BF%E7%94%A8Github-Action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&quot;git@github.com:simonkimi/simonkimi.github.io.git&quot;</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>需要在 Page 的仓库中配置 Deploy Key，用于 Github Action 自动部署。</p><p><code>secrets.DEPLOY_KEY</code> 为私钥。</p><h1 id="Github-Action-配置"><a href="#Github-Action-配置" class="headerlink" title="Github Action 配置"></a>Github Action 配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">自动部署文章</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">submodules:</span> <span class="hljs-string">&quot;recursive&quot;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span> <span class="hljs-string">LFS</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo apt-get install git-lfs</span><br><span class="hljs-string">          git lfs install</span><br><span class="hljs-string">          git lfs pull</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">.npmrc</span> <span class="hljs-string">for</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Packages</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          echo &quot;@simonkimi:registry=https://npm.pkg.github.com&quot; &gt;&gt; .npmrc</span><br><span class="hljs-string">          echo &quot;//npm.pkg.github.com/:_authToken=$&#123;&#123; secrets.PACKAGE_TOKEN &#125;&#125;&quot; &gt;&gt; .npmrc</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">pnpm</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">pnpm/action-setup@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">version:</span> <span class="hljs-string">&quot;latest&quot;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;18&quot;</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">&quot;pnpm&quot;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">SSH</span> <span class="hljs-string">for</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">webfactory/ssh-agent@v0.5.3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ssh-private-key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">install</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configure</span> <span class="hljs-string">Git</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config --global user.email &quot;git@z31.mozmail.ink&quot;</span><br><span class="hljs-string">          git config --global user.name &quot;simonkimi&quot;</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">exec</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">exec</span> <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年「羊城杯」网络安全大赛 Re部分 WriteUp</title>
    <link href="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/"/>
    <url>/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p> 使用 <code>PyInstaller Extractor v2.0</code>把exe进行解包, 在解包指令中发现 <code>Python version: 36</code>, 切换到python3.6环境中</p><p> 可以看见入口文件为 <code>login.pyc</code>, 使用 <code>uncompyle6 login.pyc</code>解析pyc文件<br> <img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873569986.png" class="" width="1708873569986">看到一堆数字, 嗯, 又是方程组, 上z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 = Ints(<span class="hljs-string">&quot;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&quot;</span>)<br>x = Solver()<br>x.add(a1 * <span class="hljs-number">88</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">65</span> - a4 * <span class="hljs-number">5</span> + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">15</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">22748</span>)<br>x.add(a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">12</span> - a4 * <span class="hljs-number">25</span> + a5 * <span class="hljs-number">41</span> + a6 * <span class="hljs-number">23</span> + a7 * <span class="hljs-number">20</span> - a8 * <span class="hljs-number">66</span> + a9 * <span class="hljs-number">31</span> + a10 * <span class="hljs-number">8</span> + a11 * <span class="hljs-number">2</span> - a12 * <span class="hljs-number">41</span> - a13 * <span class="hljs-number">39</span> + a14 * <span class="hljs-number">17</span> == <span class="hljs-number">7258</span>)<br>x.add(a1 * <span class="hljs-number">28</span> + a2 * <span class="hljs-number">35</span> + a3 * <span class="hljs-number">16</span> - a4 * <span class="hljs-number">65</span> + a5 * <span class="hljs-number">53</span> + a6 * <span class="hljs-number">39</span> + a7 * <span class="hljs-number">27</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">33</span> + a10 * <span class="hljs-number">13</span> + a11 * <span class="hljs-number">101</span> + a12 * <span class="hljs-number">90</span> - a13 * <span class="hljs-number">34</span> + a14 * <span class="hljs-number">23</span> == <span class="hljs-number">26190</span>)<br>x.add(a1 * <span class="hljs-number">23</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">59</span> + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">128</span> - a9 * <span class="hljs-number">32</span> + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">37136</span>)<br>x.add(a1 * <span class="hljs-number">38</span> + a2 * <span class="hljs-number">97</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">52</span> + a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">90</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">57</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">42</span> - a13 * <span class="hljs-number">62</span> - a14 * <span class="hljs-number">11</span> == <span class="hljs-number">27915</span>)<br>x.add(a1 * <span class="hljs-number">22</span> + a2 * <span class="hljs-number">27</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">45</span> + a5 * <span class="hljs-number">47</span> + a6 * <span class="hljs-number">49</span> + a7 * <span class="hljs-number">29</span> + a8 * <span class="hljs-number">18</span> - a9 * <span class="hljs-number">26</span> + a10 * <span class="hljs-number">35</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">40</span> - a13 * <span class="hljs-number">61</span> + a14 * <span class="hljs-number">28</span> == <span class="hljs-number">17298</span>)<br>x.add(a1 * <span class="hljs-number">12</span> + a2 * <span class="hljs-number">45</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">86</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">85</span> - a9 * <span class="hljs-number">47</span> + a10 * <span class="hljs-number">34</span> + a11 * <span class="hljs-number">76</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">44</span> + a14 * <span class="hljs-number">65</span> == <span class="hljs-number">19875</span>)<br>x.add(a1 * <span class="hljs-number">79</span> + a2 * <span class="hljs-number">62</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">85</span> + a5 * <span class="hljs-number">33</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">86</span> + a8 * <span class="hljs-number">14</span> - a9 * <span class="hljs-number">30</span> + a10 * <span class="hljs-number">25</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">57</span> - a13 * <span class="hljs-number">50</span> - a14 * <span class="hljs-number">9</span> == <span class="hljs-number">22784</span>)<br>x.add(a1 * <span class="hljs-number">8</span> + a2 * <span class="hljs-number">6</span> + a3 * <span class="hljs-number">64</span> - a4 * <span class="hljs-number">85</span> + a5 * <span class="hljs-number">73</span> + a6 * <span class="hljs-number">29</span> + a7 * <span class="hljs-number">2</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">5</span> + a11 * <span class="hljs-number">2</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">64</span> + a14 * <span class="hljs-number">27</span> == <span class="hljs-number">9710</span>)<br>x.add(a1 * <span class="hljs-number">67</span> - a2 * <span class="hljs-number">68</span> + a3 * <span class="hljs-number">68</span> - a4 * <span class="hljs-number">51</span> - a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">22</span> - a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">38</span> + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">27</span> - a13 * <span class="hljs-number">52</span> + a14 * <span class="hljs-number">31</span> == <span class="hljs-number">13376</span>)<br>x.add(a1 * <span class="hljs-number">85</span> + a2 * <span class="hljs-number">63</span> + a3 * <span class="hljs-number">5</span> - a4 * <span class="hljs-number">51</span> + a5 * <span class="hljs-number">44</span> + a6 * <span class="hljs-number">36</span> + a7 * <span class="hljs-number">28</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">6</span> + a10 * <span class="hljs-number">45</span> + a11 * <span class="hljs-number">31</span> + a12 * <span class="hljs-number">7</span> - a13 * <span class="hljs-number">67</span> + a14 * <span class="hljs-number">78</span> == <span class="hljs-number">24065</span>)<br>x.add(a1 * <span class="hljs-number">47</span> + a2 * <span class="hljs-number">64</span> + a3 * <span class="hljs-number">66</span> - a4 * <span class="hljs-number">5</span> + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">112</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">35</span> + a10 * <span class="hljs-number">95</span> + a11 * <span class="hljs-number">21</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">61</span> + a14 * <span class="hljs-number">20</span> == <span class="hljs-number">27687</span>)<br>x.add(a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">85</span> - a4 * <span class="hljs-number">25</span> + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">56</span> - a9 * <span class="hljs-number">92</span> + a10 * <span class="hljs-number">14</span> + a11 * <span class="hljs-number">89</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">61</span> - a14 * <span class="hljs-number">29</span> == <span class="hljs-number">29250</span>)<br>x.add(a1 * <span class="hljs-number">95</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">62</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">83</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">16</span> + a11 * <span class="hljs-number">51</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> - a14 * <span class="hljs-number">24</span> == <span class="hljs-number">15317</span>)<br><br><span class="hljs-built_in">print</span>(x.check())<br><span class="hljs-built_in">print</span>(x.model())<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>[a2 = <span class="hljs-number">24</span>,<br> a13 = <span class="hljs-number">88</span>,<br> a6 = <span class="hljs-number">43</span>,<br> a9 = <span class="hljs-number">52</span>,<br> a14 = <span class="hljs-number">33</span>,<br> a5 = <span class="hljs-number">104</span>,<br> a12 = <span class="hljs-number">74</span>,<br> a7 = <span class="hljs-number">28</span>,<br> a1 = <span class="hljs-number">119</span>,<br> a10 = <span class="hljs-number">108</span>,<br> a11 = <span class="hljs-number">88</span>,<br> a8 = <span class="hljs-number">91</span>,<br> a4 = <span class="hljs-number">7</span>,<br> a3 = <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>按照 <code>ord(input1[i]) ^ ord(input1[i + 1])</code>进行异或, 反推回input <code>[85, 95, 71, 48, 55, 95, 116, 104, 51, 95, 107, 51, 121, 33]</code>, 转换为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">c = [<span class="hljs-number">85</span>, <span class="hljs-number">95</span>, <span class="hljs-number">71</span>, <span class="hljs-number">48</span>, <span class="hljs-number">55</span>, <span class="hljs-number">95</span>, <span class="hljs-number">116</span>, <span class="hljs-number">104</span>, <span class="hljs-number">51</span>, <span class="hljs-number">95</span>, <span class="hljs-number">107</span>, <span class="hljs-number">51</span>, <span class="hljs-number">121</span>, <span class="hljs-number">33</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>U_G07_th3_k3y!<br></code></pre></td></tr></table></figure><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>IDA查看整体逻辑, 发现是flag经过 <code>encode_one</code> <code>encode_two</code> <code>encode_three</code>三次编码后变成 <code>EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG</code>, 首先怀疑有base64</p><img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873582365.png" class="" width="1708873582365">查看 `encode_one`, 看到一个变量 `alphabet`, 对应的 `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/`, 不用怀疑就是 `base64`,<img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873595241.png" class="" width="1708873595241"><img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/image.png" class="" title="alt text"><p>查看 <code>encode_two</code>, 看到4个 <code>strncpy</code>用法, 分析后可画出此图</p><img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873616989.png" class="" width="1708873616989"><img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873627793.png" class="" width="1708873627793"><p>查看 <code>encode_three</code>, 貌似很复杂的样子, 画出数轴, 分析后画出此图</p><img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873639923.png" class="" width="1708873639923"><img src="/2020/09/11/2020%E5%B9%B4%E3%80%8C%E7%BE%8A%E5%9F%8E%E6%9D%AF%E3%80%8D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Re%E9%83%A8%E5%88%86-WriteUp/1708873648091.png" class="" width="1708873648091"><p>先还原 <code>encode_three</code>, 我突然想到这是一一对应的关系, 把这个关系写出来然后生成一张map就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">m</span>(<span class="hljs-params">v5</span>):<br>    <span class="hljs-keyword">if</span> v5 &lt;= <span class="hljs-number">64</span> <span class="hljs-keyword">or</span> v5 &gt; <span class="hljs-number">90</span>:<br>        <span class="hljs-keyword">if</span> v5 &lt;= <span class="hljs-number">96</span> <span class="hljs-keyword">or</span> v5 &gt; <span class="hljs-number">122</span>:<br>            <span class="hljs-keyword">if</span> v5 &lt;= <span class="hljs-number">47</span> <span class="hljs-keyword">or</span> v5 &gt; <span class="hljs-number">57</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(v5)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>((v5 - <span class="hljs-number">45</span>) % <span class="hljs-number">10</span> + <span class="hljs-number">48</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>((v5 - <span class="hljs-number">94</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>((v5 - <span class="hljs-number">62</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)<br><br><br>mm = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>    raw = i<br>    fin = m(i)<br>    mm[fin] = <span class="hljs-built_in">chr</span>(raw)<br><br>data = <span class="hljs-string">&quot;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG&quot;</span><br><br><span class="hljs-built_in">print</span>(mm)<br>fin2 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> data:<br>    fin2 += mm[c]<br><br><span class="hljs-built_in">print</span>(fin2)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>&#123;<span class="hljs-string">&#x27;!&#x27;</span>: <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>: <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>: <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>: <span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>: <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>: <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>: <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;(&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>: <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>: <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>: <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>: <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>: <span class="hljs-string">&#x27;&lt;&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>: <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>: <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>: <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>: <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>: <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>: <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>: <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>: <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>: <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>: <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>: <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>: <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>: <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>: <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>: <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>: <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>: <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>: <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>: <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>: <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>: <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>: <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>: <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>: <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>: <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>: <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>: <span class="hljs-string">&#x27;~&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>BjYjM2Mjk4NzMR1dIVHs2NzJjY0MTEzM2VhMn0=zQ3NzhhMzhlOD<br></code></pre></td></tr></table></figure><p>还原 <code>encode_two</code>, 参照画的图对原来的字符串进行还原, 最后base64解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>data = <span class="hljs-string">&quot;BjYjM2Mjk4NzMR1dIVHs2NzJjY0MTEzM2VhMn0=zQ3NzhhMzhlOD&quot;</span><br><br>raw = [<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">38</span>)]<br><br>raw[<span class="hljs-number">0</span>: <span class="hljs-number">13</span>] = data[<span class="hljs-number">13</span>: <span class="hljs-number">26</span>]<br>raw[<span class="hljs-number">13</span>: <span class="hljs-number">26</span>] = data[<span class="hljs-number">39</span>: <span class="hljs-number">52</span>]<br>raw[<span class="hljs-number">26</span>: <span class="hljs-number">39</span>] = data[<span class="hljs-number">0</span>: <span class="hljs-number">13</span>]<br>raw[<span class="hljs-number">39</span>: <span class="hljs-number">52</span>] = data[<span class="hljs-number">26</span>: <span class="hljs-number">39</span>]<br><br><span class="hljs-built_in">print</span>(base64.b64decode(<span class="hljs-string">&quot;&quot;</span>.join(raw).encode()).decode())<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>GWHT&#123;672cc4778a38e80cb362987341133ea2&#125;<br></code></pre></td></tr></table></figure><h3 id="Bytecode"><a href="#Bytecode" class="headerlink" title="Bytecode"></a>Bytecode</h3><p>第一次遇到这种题目, Bytecode为python的字节码转换成人类可读的形式, 当smail来读就行, 还原成python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br></pre></td><td class="code"><pre><code class="hljs bytecode"> 4           0 LOAD_CONST               0 (3)<br>             3 LOAD_CONST               1 (37)<br>             6 LOAD_CONST               2 (72)<br>             9 LOAD_CONST               3 (9)<br>            12 LOAD_CONST               4 (6)<br>            15 LOAD_CONST               5 (132)<br>            18 BUILD_LIST               6<br>            21 STORE_NAME               0 (en)<br><br> 5          24 LOAD_CONST               6 (101)<br>            27 LOAD_CONST               7 (96)<br>            30 LOAD_CONST               8 (23)<br>            33 LOAD_CONST               9 (68)<br>            36 LOAD_CONST              10 (112)<br>            39 LOAD_CONST              11 (42)<br>            42 LOAD_CONST              12 (107)<br>            45 LOAD_CONST              13 (62)<br>            48 LOAD_CONST               7 (96)<br>            51 LOAD_CONST              14 (53)<br>            54 LOAD_CONST              15 (176)<br>            57 LOAD_CONST              16 (179)<br>            60 LOAD_CONST              17 (98)<br>            63 LOAD_CONST              14 (53)<br>            66 LOAD_CONST              18 (67)<br>            69 LOAD_CONST              19 (29)<br>            72 LOAD_CONST              20 (41)<br>            75 LOAD_CONST              21 (120)<br>            78 LOAD_CONST              22 (60)<br>            81 LOAD_CONST              23 (106)<br>            84 LOAD_CONST              24 (51)<br>            87 LOAD_CONST               6 (101)<br>            90 LOAD_CONST              25 (178)<br>            93 LOAD_CONST              26 (189)<br>            96 LOAD_CONST               6 (101)<br>            99 LOAD_CONST              27 (48)<br>           102 BUILD_LIST              26<br>           105 STORE_NAME               1 (output)<br><br> 7         108 LOAD_CONST              28 (&#x27;welcome to GWHT2020&#x27;)<br>           111 PRINT_ITEM      <br>           112 PRINT_NEWLINE   <br><br> 9         113 LOAD_NAME                2 (raw_input)<br>           116 LOAD_CONST              29 (&#x27;please input your flag:&#x27;)<br>           119 CALL_FUNCTION            1<br>           122 STORE_NAME               3 (flag)<br><br>10         125 LOAD_NAME                3 (flag)<br>           128 STORE_NAME               4 (str)<br><br>12         131 LOAD_NAME                5 (len)<br>           134 LOAD_NAME                4 (str)<br>           137 CALL_FUNCTION            1<br>           140 STORE_NAME               6 (a)<br><br>13         143 LOAD_NAME                6 (a)<br>           146 LOAD_CONST              30 (38)<br>           149 COMPARE_OP               0 (&lt;)<br>           152 POP_JUMP_IF_FALSE      173<br><br>14         155 LOAD_CONST              31 (&#x27;lenth wrong!&#x27;)<br>           158 PRINT_ITEM      <br>           159 PRINT_NEWLINE   <br><br>15         160 LOAD_NAME                7 (exit)<br>           163 LOAD_CONST              32 (0)<br>           166 CALL_FUNCTION            1<br>           169 POP_TOP         <br>           170 JUMP_FORWARD             0 (to 173)<br><br>17     &gt;&gt;  173 LOAD_NAME                8 (ord)<br>           176 LOAD_NAME                4 (str)<br>           179 LOAD_CONST              32 (0)<br>           182 BINARY_SUBSCR   <br>           183 CALL_FUNCTION            1<br>           186 LOAD_CONST              33 (2020)<br>           189 BINARY_MULTIPLY   <br>           190 LOAD_NAME                8 (ord)<br>           193 LOAD_NAME                4 (str)<br>           196 LOAD_CONST              34 (1)<br>           199 BINARY_SUBSCR   <br>           200 CALL_FUNCTION            1<br>           203 BINARY_ADD      <br>           204 LOAD_CONST              33 (2020)<br>           207 BINARY_MULTIPLY   <br>           208 LOAD_NAME                8 (ord)<br>           211 LOAD_NAME                4 (str)<br>           214 LOAD_CONST              35 (2)<br>           217 BINARY_SUBSCR   <br>           218 CALL_FUNCTION            1<br>           221 BINARY_ADD      <br>           222 LOAD_CONST              33 (2020)<br>           225 BINARY_MULTIPLY   <br>           226 LOAD_NAME                8 (ord)<br>           229 LOAD_NAME                4 (str)<br>           232 LOAD_CONST               0 (3)<br>           235 BINARY_SUBSCR   <br>           236 CALL_FUNCTION            1<br>           239 BINARY_ADD      <br>           240 LOAD_CONST              33 (2020)<br>           243 BINARY_MULTIPLY   <br>           244 LOAD_NAME                8 (ord)<br>           247 LOAD_NAME                4 (str)<br>           250 LOAD_CONST              36 (4)<br>           253 BINARY_SUBSCR   <br>           254 CALL_FUNCTION            1<br>           257 BINARY_ADD      <br>           258 LOAD_CONST              37 (1182843538814603)<br>           261 COMPARE_OP               2 (==)<br>           264 POP_JUMP_IF_FALSE      275<br><br>18         267 LOAD_CONST              38 (&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;)<br>           270 PRINT_ITEM      <br>           271 PRINT_NEWLINE   <br>           272 JUMP_FORWARD            15 (to 290)<br><br>20     &gt;&gt;  275 LOAD_CONST              39 (&#x27;bye~&#x27;)<br>           278 PRINT_ITEM      <br>           279 PRINT_NEWLINE   <br><br>21         280 LOAD_NAME                7 (exit)<br>           283 LOAD_CONST              32 (0)<br>           286 CALL_FUNCTION            1<br>           289 POP_TOP         <br><br>23     &gt;&gt;  290 BUILD_LIST               0<br>           293 STORE_NAME               9 (x)<br><br>24         296 LOAD_CONST              40 (5)<br>           299 STORE_NAME              10 (k)<br><br>25         302 SETUP_LOOP             128 (to 433)<br>           305 LOAD_NAME               11 (range)<br>           308 LOAD_CONST              41 (13)<br>           311 CALL_FUNCTION            1<br>           314 GET_ITER        <br>       &gt;&gt;  315 FOR_ITER               114 (to 432)<br>           318 STORE_NAME              12 (i)<br><br>26         321 LOAD_NAME                8 (ord)<br>           324 LOAD_NAME                4 (str)<br>           327 LOAD_NAME               10 (k)<br>           330 BINARY_SUBSCR   <br>           331 CALL_FUNCTION            1<br>           334 STORE_NAME              13 (b)<br><br>27         337 LOAD_NAME                8 (ord)<br>           340 LOAD_NAME                4 (str)<br>           343 LOAD_NAME               10 (k)<br>           346 LOAD_CONST              34 (1)<br>           349 BINARY_ADD      <br>           350 BINARY_SUBSCR   <br>           351 CALL_FUNCTION            1<br>           354 STORE_NAME              14 (c)<br><br>28         357 LOAD_NAME               14 (c)<br>           360 LOAD_NAME                0 (en)<br>           363 LOAD_NAME               12 (i)<br>           366 LOAD_CONST               4 (6)<br>           369 BINARY_MODULO   <br>           370 BINARY_SUBSCR   <br>           371 BINARY_XOR      <br>           372 STORE_NAME              15 (a11)<br><br>29         375 LOAD_NAME               13 (b)<br>           378 LOAD_NAME                0 (en)<br>           381 LOAD_NAME               12 (i)<br>           384 LOAD_CONST               4 (6)<br>           387 BINARY_MODULO   <br>           388 BINARY_SUBSCR   <br>           389 BINARY_XOR      <br>           390 STORE_NAME              16 (a22)<br><br>30         393 LOAD_NAME                9 (x)<br>           396 LOAD_ATTR               17 (append)<br>           399 LOAD_NAME               15 (a11)<br>           402 CALL_FUNCTION            1<br>           405 POP_TOP         <br><br>31         406 LOAD_NAME                9 (x)<br>           409 LOAD_ATTR               17 (append)<br>           412 LOAD_NAME               16 (a22)<br>           415 CALL_FUNCTION            1<br>           418 POP_TOP         <br><br>32         419 LOAD_NAME               10 (k)<br>           422 LOAD_CONST              35 (2)<br>           425 INPLACE_ADD     <br>           426 STORE_NAME              10 (k)<br>           429 JUMP_ABSOLUTE          315<br>       &gt;&gt;  432 POP_BLOCK       <br><br>33     &gt;&gt;  433 LOAD_NAME                9 (x)<br>           436 LOAD_NAME                1 (output)<br>           439 COMPARE_OP               2 (==)<br>           442 POP_JUMP_IF_FALSE      453<br><br>34         445 LOAD_CONST              38 (&#x27;good!continue\xe2\x80\xa6\xe2\x80\xa6&#x27;)<br>           448 PRINT_ITEM      <br>           449 PRINT_NEWLINE   <br>           450 JUMP_FORWARD            15 (to 468)<br><br>36     &gt;&gt;  453 LOAD_CONST              42 (&#x27;oh,you are wrong!&#x27;)<br>           456 PRINT_ITEM      <br>           457 PRINT_NEWLINE   <br><br>37         458 LOAD_NAME                7 (exit)<br>           461 LOAD_CONST              32 (0)<br>           464 CALL_FUNCTION            1<br>           467 POP_TOP         <br><br>39     &gt;&gt;  468 LOAD_NAME                5 (len)<br>           471 LOAD_NAME                4 (str)<br>           474 CALL_FUNCTION            1<br>           477 STORE_NAME              18 (l)<br><br>40         480 LOAD_NAME                8 (ord)<br>           483 LOAD_NAME                4 (str)<br>           486 LOAD_NAME               18 (l)<br>           489 LOAD_CONST              43 (7)<br>           492 BINARY_SUBTRACT   <br>           493 BINARY_SUBSCR   <br>           494 CALL_FUNCTION            1<br>           497 STORE_NAME              19 (a1)<br><br>41         500 LOAD_NAME                8 (ord)<br>           503 LOAD_NAME                4 (str)<br>           506 LOAD_NAME               18 (l)<br>           509 LOAD_CONST               4 (6)<br>           512 BINARY_SUBTRACT   <br>           513 BINARY_SUBSCR   <br>           514 CALL_FUNCTION            1<br>           517 STORE_NAME              20 (a2)<br><br>42         520 LOAD_NAME                8 (ord)<br>           523 LOAD_NAME                4 (str)<br>           526 LOAD_NAME               18 (l)<br>           529 LOAD_CONST              40 (5)<br>           532 BINARY_SUBTRACT   <br>           533 BINARY_SUBSCR   <br>           534 CALL_FUNCTION            1<br>           537 STORE_NAME              21 (a3)<br><br>43         540 LOAD_NAME                8 (ord)<br>           543 LOAD_NAME                4 (str)<br>           546 LOAD_NAME               18 (l)<br>           549 LOAD_CONST              36 (4)<br>           552 BINARY_SUBTRACT   <br>           553 BINARY_SUBSCR   <br>           554 CALL_FUNCTION            1<br>           557 STORE_NAME              22 (a4)<br><br>44         560 LOAD_NAME                8 (ord)<br>           563 LOAD_NAME                4 (str)<br>           566 LOAD_NAME               18 (l)<br>           569 LOAD_CONST               0 (3)<br>           572 BINARY_SUBTRACT   <br>           573 BINARY_SUBSCR   <br>           574 CALL_FUNCTION            1<br>           577 STORE_NAME              23 (a5)<br><br>45         580 LOAD_NAME                8 (ord)<br>           583 LOAD_NAME                4 (str)<br>           586 LOAD_NAME               18 (l)<br>           589 LOAD_CONST              35 (2)<br>           592 BINARY_SUBTRACT   <br>           593 BINARY_SUBSCR   <br>           594 CALL_FUNCTION            1<br>           597 STORE_NAME              24 (a6)<br><br>46         600 LOAD_NAME               19 (a1)<br>           603 LOAD_CONST               0 (3)<br>           606 BINARY_MULTIPLY   <br>           607 LOAD_NAME               20 (a2)<br>           610 LOAD_CONST              35 (2)<br>           613 BINARY_MULTIPLY   <br>           614 BINARY_ADD      <br>           615 LOAD_NAME               21 (a3)<br>           618 LOAD_CONST              40 (5)<br>           621 BINARY_MULTIPLY   <br>           622 BINARY_ADD      <br>           623 LOAD_CONST              44 (1003)<br>           626 COMPARE_OP               2 (==)<br>           629 POP_JUMP_IF_FALSE      807<br><br>47         632 LOAD_NAME               19 (a1)<br>           635 LOAD_CONST              36 (4)<br>           638 BINARY_MULTIPLY   <br>           639 LOAD_NAME               20 (a2)<br>           642 LOAD_CONST              43 (7)<br>           645 BINARY_MULTIPLY   <br>           646 BINARY_ADD      <br>           647 LOAD_NAME               21 (a3)<br>           650 LOAD_CONST               3 (9)<br>           653 BINARY_MULTIPLY   <br>           654 BINARY_ADD      <br>           655 LOAD_CONST              45 (2013)<br>           658 COMPARE_OP               2 (==)<br>           661 POP_JUMP_IF_FALSE      807<br><br>48         664 LOAD_NAME               19 (a1)<br>           667 LOAD_NAME               20 (a2)<br>           670 LOAD_CONST              46 (8)<br>           673 BINARY_MULTIPLY   <br>           674 BINARY_ADD      <br>           675 LOAD_NAME               21 (a3)<br>           678 LOAD_CONST              35 (2)<br>           681 BINARY_MULTIPLY   <br>           682 BINARY_ADD      <br>           683 LOAD_CONST              47 (1109)<br>           686 COMPARE_OP               2 (==)<br>           689 POP_JUMP_IF_FALSE      804<br><br>49         692 LOAD_NAME               22 (a4)<br>           695 LOAD_CONST               0 (3)<br>           698 BINARY_MULTIPLY   <br>           699 LOAD_NAME               23 (a5)<br>           702 LOAD_CONST              35 (2)<br>           705 BINARY_MULTIPLY   <br>           706 BINARY_ADD      <br>           707 LOAD_NAME               24 (a6)<br>           710 LOAD_CONST              40 (5)<br>           713 BINARY_MULTIPLY   <br>           714 BINARY_ADD      <br>           715 LOAD_CONST              48 (671)<br>           718 COMPARE_OP               2 (==)<br>           721 POP_JUMP_IF_FALSE      801<br><br>50         724 LOAD_NAME               22 (a4)<br>           727 LOAD_CONST              36 (4)<br>           730 BINARY_MULTIPLY   <br>           731 LOAD_NAME               23 (a5)<br>           734 LOAD_CONST              43 (7)<br>           737 BINARY_MULTIPLY   <br>           738 BINARY_ADD      <br>           739 LOAD_NAME               24 (a6)<br>           742 LOAD_CONST               3 (9)<br>           745 BINARY_MULTIPLY   <br>           746 BINARY_ADD      <br>           747 LOAD_CONST              49 (1252)<br>           750 COMPARE_OP               2 (==)<br>           753 POP_JUMP_IF_FALSE      798<br><br>51         756 LOAD_NAME               22 (a4)<br>           759 LOAD_NAME               23 (a5)<br>           762 LOAD_CONST              46 (8)<br>           765 BINARY_MULTIPLY   <br>           766 BINARY_ADD      <br>           767 LOAD_NAME               24 (a6)<br>           770 LOAD_CONST              35 (2)<br>           773 BINARY_MULTIPLY   <br>           774 BINARY_ADD      <br>           775 LOAD_CONST              50 (644)<br>           778 COMPARE_OP               2 (==)<br>           781 POP_JUMP_IF_FALSE      795<br><br>52         784 LOAD_CONST              51 (&#x27;congraduation!you get the right flag!&#x27;)<br>           787 PRINT_ITEM      <br>           788 PRINT_NEWLINE   <br>           789 JUMP_ABSOLUTE          795<br>           792 JUMP_ABSOLUTE          798<br>       &gt;&gt;  795 JUMP_ABSOLUTE          801<br>       &gt;&gt;  798 JUMP_ABSOLUTE          804<br>       &gt;&gt;  801 JUMP_ABSOLUTE          807<br>       &gt;&gt;  804 JUMP_FORWARD             0 (to 807)<br>       &gt;&gt;  807 LOAD_CONST              52 (None)<br>           810 RETURN_VALUE <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python">en = [<span class="hljs-number">3</span>, <span class="hljs-number">37</span>, <span class="hljs-number">72</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">132</span>]<br>output = [<span class="hljs-number">101</span>, <span class="hljs-number">96</span>, <span class="hljs-number">23</span>, <span class="hljs-number">68</span>, <span class="hljs-number">112</span>, <span class="hljs-number">42</span>, <span class="hljs-number">107</span>, <span class="hljs-number">62</span>, <span class="hljs-number">96</span>, <span class="hljs-number">53</span>, <span class="hljs-number">176</span>, <span class="hljs-number">179</span>, <span class="hljs-number">98</span>, <span class="hljs-number">53</span>, <span class="hljs-number">67</span>, <span class="hljs-number">29</span>, <span class="hljs-number">41</span>, <span class="hljs-number">120</span>, <span class="hljs-number">60</span>, <span class="hljs-number">106</span>, <span class="hljs-number">51</span>, <span class="hljs-number">101</span>, <span class="hljs-number">178</span>, <span class="hljs-number">189</span>, <span class="hljs-number">101</span>,<br>          <span class="hljs-number">48</span>]<br>flag = <span class="hljs-built_in">input</span>()<br><br>str1 = flag<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) &lt; <span class="hljs-number">38</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lenth wrong!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br>s = <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">0</span>]) * <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">1</span>])<br>s *= <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">2</span>])<br>s *= <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">3</span>])<br>s *= <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">4</span>])<br><span class="hljs-keyword">if</span> s == <span class="hljs-number">1182843538814603</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;good!continue&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    exit()<br><br>x = []<br>k = <span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>    b = <span class="hljs-built_in">ord</span>(str1[k])<br>    c = <span class="hljs-built_in">ord</span>(str1[k + <span class="hljs-number">1</span>])<br>    a11 = c ^ en[i % <span class="hljs-number">6</span>]<br>    a22 = b ^ en[i % <span class="hljs-number">6</span>]<br>    x.append(a11)<br>    x.append(a22)<br>    k = k + <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> x == output:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;good!continue&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    exit()<br><br>l = <span class="hljs-built_in">len</span>(str1)<br>a1 = <span class="hljs-built_in">ord</span>(str1[l - <span class="hljs-number">7</span>])<br>a2 = <span class="hljs-built_in">ord</span>(str1[l - <span class="hljs-number">6</span>])<br>a3 = <span class="hljs-built_in">ord</span>(str1[l - <span class="hljs-number">5</span>])<br>a4 = <span class="hljs-built_in">ord</span>(str1[l - <span class="hljs-number">4</span>])<br>a5 = <span class="hljs-built_in">ord</span>(str1[l - <span class="hljs-number">3</span>])<br>a6 = <span class="hljs-built_in">ord</span>(str1[l - <span class="hljs-number">2</span>])<br><br><br><span class="hljs-keyword">if</span> a1 * <span class="hljs-number">3</span> + a2 * <span class="hljs-number">2</span> + a3 * <span class="hljs-number">5</span> == <span class="hljs-number">1003</span>:<br>    <span class="hljs-keyword">if</span> a1 * <span class="hljs-number">4</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">9</span> == <span class="hljs-number">2013</span>:<br>        <span class="hljs-keyword">if</span> a1 + a2 * <span class="hljs-number">8</span> + a3 * <span class="hljs-number">2</span> == <span class="hljs-number">1109</span>:<br>            <span class="hljs-keyword">if</span> a4 * <span class="hljs-number">3</span> + a5 * <span class="hljs-number">2</span> + a6 * <span class="hljs-number">5</span> == <span class="hljs-number">671</span>:<br>                <span class="hljs-keyword">if</span> a4 * <span class="hljs-number">4</span> + a5 * <span class="hljs-number">7</span> + a6 * <span class="hljs-number">9</span> == <span class="hljs-number">1252</span>:<br>                    <span class="hljs-keyword">if</span> a4 + a5 * <span class="hljs-number">8</span> + a6 * <span class="hljs-number">2</span> == <span class="hljs-number">644</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;congraduation!you get the right flag!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>首先分析第一段, 其实根据常识即可知道应该是 <code>GWHT&#123;</code>, 带入后正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">0</span>]) * <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">1</span>])<br>s *= <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">2</span>])<br>s *= <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">3</span>])<br>s *= <span class="hljs-number">2020</span><br>s += <span class="hljs-built_in">ord</span>(str1[<span class="hljs-number">4</span>])<br><span class="hljs-keyword">if</span> s == <span class="hljs-number">1182843538814603</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;good!continue&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    exit()<br></code></pre></td></tr></table></figure><p>第二段分析, 可知为从第5位开始, 每两位进行某种异或运算, 而且其取值仅和output有关, 和前面和后面无关, 只有两位进行爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">en = [<span class="hljs-number">3</span>, <span class="hljs-number">37</span>, <span class="hljs-number">72</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">132</span>]<br>output = [<span class="hljs-number">101</span>, <span class="hljs-number">96</span>, <span class="hljs-number">23</span>, <span class="hljs-number">68</span>, <span class="hljs-number">112</span>, <span class="hljs-number">42</span>, <span class="hljs-number">107</span>, <span class="hljs-number">62</span>, <span class="hljs-number">96</span>, <span class="hljs-number">53</span>, <span class="hljs-number">176</span>, <span class="hljs-number">179</span>, <span class="hljs-number">98</span>, <span class="hljs-number">53</span>, <span class="hljs-number">67</span>, <span class="hljs-number">29</span>, <span class="hljs-number">41</span>, <span class="hljs-number">120</span>, <span class="hljs-number">60</span>, <span class="hljs-number">106</span>, <span class="hljs-number">51</span>, <span class="hljs-number">101</span>, <span class="hljs-number">178</span>, <span class="hljs-number">189</span>, <span class="hljs-number">101</span>,<br>          <span class="hljs-number">48</span>]<br>final = []<br><br><span class="hljs-keyword">for</span> zz <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>        <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>, <span class="hljs-number">127</span>):<br>            <span class="hljs-keyword">for</span> yy <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>, <span class="hljs-number">127</span>):<br>                str1 = <span class="hljs-string">&#x27;GWHT&#123;&#x27;</span> + <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(xx)&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(yy)&#125;</span>&quot;</span> * <span class="hljs-number">13</span><br>                x = []<br>                k = <span class="hljs-number">5</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>                    b = <span class="hljs-built_in">ord</span>(str1[k])<br>                    c = <span class="hljs-built_in">ord</span>(str1[k + <span class="hljs-number">1</span>])<br>                    a11 = c ^ en[i % <span class="hljs-number">6</span>]<br>                    a22 = b ^ en[i % <span class="hljs-number">6</span>]<br>                    x.append(a11)<br>                    x.append(a22)<br>                    k += <span class="hljs-number">2</span><br>                <span class="hljs-keyword">if</span> x[zz] == output[zz] <span class="hljs-keyword">and</span> x[zz + <span class="hljs-number">1</span>] == output[zz + <span class="hljs-number">1</span>]:<br>                    final.append(xx)<br>                    final.append(yy)<br>                    <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fail&quot;</span>, zz)<br>    foo()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> final]))<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>cfa2b87b3f746a8f0ac5c5963f<br></code></pre></td></tr></table></figure><p> 第三段, 又双叒叕是方程组, <del>这次怎么这么喜欢出方程组</del>, z3直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>a1, a2, a3, a4, a5, a6 = Ints(<span class="hljs-string">&quot;a1 a2 a3 a4 a5 a6&quot;</span>)<br><br>x = Solver()<br><br>x.add(a1 * <span class="hljs-number">3</span> + a2 * <span class="hljs-number">2</span> + a3 * <span class="hljs-number">5</span> == <span class="hljs-number">1003</span>)<br>x.add(a1 * <span class="hljs-number">4</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">9</span> == <span class="hljs-number">2013</span>)<br>x.add(a1 + a2 * <span class="hljs-number">8</span> + a3 * <span class="hljs-number">2</span> == <span class="hljs-number">1109</span>)<br>x.add(a4 * <span class="hljs-number">3</span> + a5 * <span class="hljs-number">2</span> + a6 * <span class="hljs-number">5</span> == <span class="hljs-number">671</span>)<br>x.add(a4 * <span class="hljs-number">4</span> + a5 * <span class="hljs-number">7</span> + a6 * <span class="hljs-number">9</span> == <span class="hljs-number">1252</span>)<br>x.add(a4 + a5 * <span class="hljs-number">8</span> + a6 * <span class="hljs-number">2</span> == <span class="hljs-number">644</span>)<br><br>x.check()<br><span class="hljs-built_in">print</span>(x.model())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">97</span>, <span class="hljs-number">101</span>, <span class="hljs-number">102</span>, <span class="hljs-number">102</span>, <span class="hljs-number">55</span>, <span class="hljs-number">51</span>]:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>[a5 = <span class="hljs-number">55</span>, a2 = <span class="hljs-number">101</span>, a6 = <span class="hljs-number">51</span>, a3 = <span class="hljs-number">102</span>, a4 = <span class="hljs-number">102</span>, a1 = <span class="hljs-number">97</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>aeff73<br></code></pre></td></tr></table></figure><p> 最后拼接一下<br> <code>cfa2b87b3f746a8f0ac5c5963faeff73</code></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向笔记(二) -- 破解AutoR的注册码验证</title>
    <link href="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/"/>
    <url>/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h1><p>此软件不同于普通的Android软件, 是由 <code>Mono for Android</code>编写的, 主逻辑的语言为C#, 在尝试破解这款软件的时候花费了我大量功夫, 特此记录</p><h1 id="0x1-界面分析"><a href="#0x1-界面分析" class="headerlink" title="0x1 界面分析"></a>0x1 界面分析</h1><p>首先打开软件有一个输入注册码的输入框, 随便输入一串注册码点击验证</p><p>随后显示: 操作失败, 验证码不正确, 尝试抓包, 发现请求</p><p>说明此软件为网络验证, 有了这些信息准备开始逆向</p><h1 id="0x2-反编译"><a href="#0x2-反编译" class="headerlink" title="0x2 反编译"></a>0x2 反编译</h1><p>首先将apk扔进 <code>Android Killer</code>(下面简称AK)里进行分析, 发现此软件并不同于普通的软件</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874295433.png" class="" width="1708874295433"><p>发现其<strong>只有一个Activity</strong>, 且都以 <code>md5</code>命名, 怀疑加壳, 使用查壳工具进行验证</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874303688.png" class="" width="1708874303688"><p>发现并没有加壳, 只能手动进行分析, 只有一个Activity肯定不正常, 首先检查 <code>assets</code>和 <code>lib</code>查看是否有线索</p><p>在 <code>lib</code>文件里发现猫腻, 有几个 <code>libmono</code>开头的.so文件, 还有 <code>libmonodroid_bundle_app.so</code>, 经过百度, 此Android程序并非传统的Android程序, 而是 <code>Mono for Android</code>, 使用C#写的.</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874313307.png" class="" width="1708874313307"><p>检查 <code>MainActivity</code>代码, 发现大量native代码, 说明Java层全是代理方法, 没有主逻辑, 现在应该寻找C#代码藏在哪里</p><p>网上查询得知, 所有的C#代码都藏在 <code>libmonodroid_bundle_app.so</code>内, 且是个千层饼结构, 尝试使用 <code>binwalk</code>检查, 发现大量压缩包</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874321286.png" class="" width="1708874321286"><p>不过一个一个解压是要死的, 于是上GitHub寻找工具, 找到<a href="https://github.com/tjg1/mono_unbundle">mono_unbundle</a>这款工具<br>使用命令 <code>mono_unbundle libmonodroid_bundle_app.so dlls/</code>解包, 获得dll文件一堆</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874330106.png" class="" width="1708874330106"><p>根据 <code>mono for android</code>结构, 主逻辑在 <code>&lt;appname&gt;.dll</code>内, 使用 <code>dnSpy</code>进行反编译</p><p>查找其页面控制, 根据Android开发习惯, 重点寻找 <code>ViewModel</code>, 于是在 <code>AutoR.ViewModel</code>内寻找到重点函数 <code>OnCDKCommandExecuted()</code></p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874339087.png" class="" width="1708874339087"><p>分析其代码, 可以梳理出其逻辑大概是这样的</p><ol><li>将注册码发送出去, 返回数据分为三段, 分别为 <code>登录成功|剩余时间|CDKToken</code></li><li>然后CDKToken拿去进行验证, 拼接字符串 <code>CDKToken|时间戳</code>, 然后与 <code>123C7E5E875FBF0EEE2583F8AF3DDFF9</code>进行循环异或运算<img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874354185.png" class="" width="1708874354185"><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874371281.png" class="" width="1708874371281"></li><li>将加密的数据发送给服务器, 服务器进行某种运算后返回一个Base64<img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874377878.png" class="" width="1708874377878"></li><li>客户端对Base64与时间戳进行运算, 最终能变成字符串PASS, 说明验证成功</li></ol><h1 id="0x3-破解"><a href="#0x3-破解" class="headerlink" title="0x3 破解"></a>0x3 破解</h1><p>这里有两种思路</p><ol><li>直接修改C#代码并回编译</li><li>通过代理拦截验证函数, 使其返回正常</li></ol><p>由于选择第一种后我不会将dll打包回so文件, 我这里选择第二种方法<br>首先通过 <code>Fiddler</code>进行拦截, 返回固定数据, 伪造第一个数据包</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874387552.png" class="" width="1708874387552"><p>可以发现软件发出了第二个数据包, 数据为 <code>NTA0MDMyOzo1NjY6OjIzMTIzfzIxMDc2NTQ7OjM=</code>, base64解码后为 <code>504032;:566::231232107654;:3</code></p><p>返回的数据包经过一定的运算后, 最终变成 <code>PASS</code>, 尝试进行反向运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login4</span>(<span class="hljs-params">data_in: <span class="hljs-built_in">str</span></span>):<br>    input_bytes = <span class="hljs-built_in">list</span>(base64.b64decode(data_in))<br>    key_byte = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;123C7E5E875FBF0EEE2583F8AF3DDFF9&quot;</span>.encode())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(input_bytes) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key_byte) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            input_bytes[i] ^= key_byte[j]<br>    ok, token = <span class="hljs-built_in">bytes</span>(input_bytes).decode().split(<span class="hljs-string">&quot;|&quot;</span>)<br>    <span class="hljs-built_in">print</span>(ok, token)<br>    ok_bytes = <span class="hljs-built_in">list</span>(ok.encode())<br>    final_data = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;PASS&quot;</span>.encode())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final_data) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ok) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            final_data[i] ^= ok_bytes[j]<br>    <span class="hljs-keyword">return</span> base64.b64encode(<span class="hljs-built_in">bytes</span>(final_data)).decode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>():<br>    ok = <span class="hljs-string">&quot;637301896559910210&quot;</span><br>    array2 = <span class="hljs-built_in">list</span>(base64.b64decode(login4(<span class="hljs-string">&quot;NTA0MDMyOzo1NjY6OjIzMTIzfzIxMDc2NTQ7OjM=&quot;</span>)))<br>    ok_bytes = <span class="hljs-built_in">list</span>(ok.encode())<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(array2)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ok_bytes)):<br>            array2[i] ^= ok_bytes[j]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(array2).decode()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(verify())<br></code></pre></td></tr></table></figure><p>其中 <code>login4()</code>是接受软件请求验证的数据, <code>verify()</code>模拟软件发送验证, 随后编写代理服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> base64<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/cd694e62ba74089c8df7aefb324c7910&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    data = request.args.get(<span class="hljs-string">&quot;login4&quot;</span>)<br>    <span class="hljs-keyword">if</span> data:<br>        <span class="hljs-keyword">return</span> login4(data)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登录成功|999999|1234567890&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login4</span>(<span class="hljs-params">data_in: <span class="hljs-built_in">str</span></span>):<br>    input_bytes = <span class="hljs-built_in">list</span>(base64.b64decode(data_in))<br>    key_byte = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;123C7E5E875FBF0EEE2583F8AF3DDFF9&quot;</span>.encode())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(input_bytes) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key_byte) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            input_bytes[i] ^= key_byte[j]<br>    ok, token = <span class="hljs-built_in">bytes</span>(input_bytes).decode().split(<span class="hljs-string">&quot;|&quot;</span>)<br>    <span class="hljs-built_in">print</span>(ok, token)<br>    ok_bytes = <span class="hljs-built_in">list</span>(ok.encode())<br>    final_data = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;PASS&quot;</span>.encode())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final_data) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ok) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            final_data[i] ^= ok_bytes[j]<br>    <span class="hljs-keyword">return</span> base64.b64encode(<span class="hljs-built_in">bytes</span>(final_data)).decode()<br><br><br>app.run()<br></code></pre></td></tr></table></figure><p>然后通过 <code>Fiddler</code>的重定向功能进行测试</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874404790.png" class="" width="1708874404790"><p>验证结果</p><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874412304.png" class="" width="1708874412304"><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874419277.png" class="" width="1708874419277"><img src="/2020/07/13/Android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E4%BA%8C-%E7%A0%B4%E8%A7%A3AutoR%E7%9A%84%E6%B3%A8%E5%86%8C%E7%A0%81%E9%AA%8C%E8%AF%81/1708874425964.png" class="" width="1708874425964"><p>这个软件就此就破解完成了</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向笔记 -- 记一次解决飞天助手未知模拟器方法</title>
    <link href="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h1><p>原来一直使用的飞天助手突然限制了模拟器, 美其名曰: “第三方模拟器盗用数据”云云, 谁不知道其实是想引流. 虽然无可厚非, 但是推荐的模拟器实在是太难用了, 于是修改下成为所有模拟器通用</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873826326.png" class="" width="1708873826326"><h1 id="0x1-逻辑分析"><a href="#0x1-逻辑分析" class="headerlink" title="0x1 逻辑分析"></a>0x1 逻辑分析</h1><p>首先, 此界面并不是开始就直接显示, 而是点击运行脚本后再显示, 如果从程序入口来分析将很麻烦, 于是我打算追查是什么启动了此activity</p><p>首先检查此activity的包名, 使用adb链接模拟器 <code>adb connect 127.0.0.1:5555</code>, 注意, 每个模拟器的端口都不一样, 用之前检查下</p><p>然后使用命令 <code>adb shell dumpsys activity | findstr &quot;mResumed&quot;</code>查看最上层包名, 结果为 <code>****/ui.activity.AdActivity</code></p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873845895.png" class="" width="1708873845895"><h1 id="0x2-检查逻辑"><a href="#0x2-检查逻辑" class="headerlink" title="0x2 检查逻辑"></a>0x2 检查逻辑</h1><p>这里我是用 <code>Android Killer</code>进行分析, 加载此脚本, 查看<strong>activity</strong>, 发现所有的Activity和Service都是灰色的, <strong>这主要是因为新版Android在打包时会分开储存dex, 而android killer的确有点老了, 只会识别第一个dex</strong>我用的ak已经魔改过了, 其实其他dex已经反编译, 自己找找即可</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873853600.png" class="" width="1708873853600"><p>首先寻找 <code>AdActivity</code>,  发现位于 <code>smali_classes3/ui/activity</code>下, 查看其Java代码</p><p>发现一个公共静态方法 <code>public static void startAdActivity</code>, 很明显这个函数就是启动广告的关键, 使用搜索检测是哪里调用了这个方法</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873887894.png" class="" width="1708873887894"><p>在Android Killer里搜索 <code>startAdActivity</code>, 发现一共有两处</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873899638.png" class="" width="1708873899638"><p>首先看下面一个, 阅读smail源码, 可以看见**startAdActivity(context, this.mAdTitle, this.mWebPath) 随后finish(), 最后 return-void<img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873923712.png" class="" width="1708873923712"><br>上面一个可以看见 <code>startAdActivity(context, &quot;&quot;, ScriptCommandBean.getDLPlatformPrompt()) </code>, 从英文上可以明显怀疑为在此检测模拟器, 查看Java代码</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873935843.png" class="" width="1708873935843"><p>可以看见对比 <code>paramBaseBeanNew.getData()).getDLPlatformPrompt()</code>为0的时候, 代表检测模拟器通过</p><p>首先是发现关键词 <code>RetrofitApiManager</code>, 可以知道用的是 <code>Retrofit</code>, 寻找对应的api <code>NormalSwitch(DLPlatformPrompt)</code>, 发现请求网址API</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873964755.png" class="" width="1708873964755"><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873987953.png" class="" width="1708873987953"><p>可以拿到检测网站 <code>http://api.aistool.com/ftzs/system/getAll?paramKey=DLPlatformPrompt</code><br>使用Postman进行访问, 发现结果</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873981271.png" class="" width="1708873981271"><p>其中 <code>http://lander.gc.com.cn/~preview/cn/campaign/ftldy.htm</code>就是看到的那个未知模拟器的网站<br>现在怀疑, 是否通过Header进行检测模拟器? 但是检查okhttp后并没有发现header, 于是我选择抓包进行验证</p><p> 首先使用”未知模拟器”, 抓包结果如图, 并没有Header</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708873998358.png" class="" width="1708873998358">然后使用遁地模拟器, 发现根本没有这个请求, 说明这步并不是检测模拟器的核心,, 而是获取模拟器广告的地方, 这里应该为一个开关**如果返回的广告不为地址而为0, 说明不限制其他模拟器, 这里可以作为一个破解点, 即使其返回0**, 但是我想看看其检测模拟器的原理, 于是继续追踪 `checkDeviceApi`<img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708874014317.png" class="" width="1708874014317"><p>由于JD没法正确解析, 只能读smali源码里, 下面是翻译的伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> mIsRfOrDD<br><span class="hljs-built_in">this</span>.mIsRfOrDD = TfloatHelp.isPass()<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.mIsRfOrDD) &#123;<br>startRunScript()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (android.os.Build.VERSION.SDK_INT != <span class="hljs-number">0x13</span>) &#123;<br>checkDeviceApi()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>追踪 <code>isPass()</code>, 发现 <code>ui.util.DundiUtils.isDunDi()</code>, 发现是通过 <code>shell getprop ro.hardware</code>里是否有遁地进行判断的, 进行测试</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/image.png" class="" title="alt text"><p>雷电模拟器:</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708874023447.png" class="" width="1708874023447"><p>遁地模拟器:</p><p>如何检测遁地模拟器到此明白了</p><h1 id="0x3-解除限制"><a href="#0x3-解除限制" class="headerlink" title="0x3 解除限制"></a>0x3 解除限制</h1><p>现在解除限制的方法很多</p><ul><li>修改 <code>checkDeviceApi()</code>, 将返回的广告改为0, 如果为0说明不做限制, 脚本照样能启动</li><li>修改 <code>isPass()</code>, 让其检测自己为遁地模拟器</li></ul><p>这里我选择第二种<br>在 <code>Lapp/ais/dev/TFloatWinService.smali </code>的 <code>7106</code>行<img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708874046756.png" class="" width="1708874046756"><br> 在这里, 将 <code>if-nez v0, :cond_2</code>改为 <code>goto :cond_2</code>, 于是代码变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> mIsRfOrDD<br><span class="hljs-built_in">this</span>.mIsRfOrDD = TfloatHelp.isPass()<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>   startRunScript()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">if</span> (android.os.Build.VERSION.SDK_INT != <span class="hljs-number">0x13</span>) &#123;<br>   checkDeviceApi()<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保存后回编译, 安装到模拟器内, 限制已被解除</p><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708874059012.png" class="" width="1708874059012"><img src="/2020/07/09/android%E9%80%86%E5%90%91%E7%AC%94%E8%AE%B0-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%A3%9E%E5%A4%A9%E5%8A%A9%E6%89%8B%E6%9C%AA%E7%9F%A5%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%96%B9%E6%B3%95/1708874065986.png" class="" width="1708874065986">]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unipus iTEST考试助手---写脚本与反脚本的拉锯战</title>
    <link href="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/"/>
    <url>/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h2><p><strong>脚本已经失效, 此博客只为记录我的开发历程, 方便大家学习油猴脚本开发</strong><br>学校的英语考试选择在ITEST平台上进行, 并让我们进行了一次模拟考试, 进入考试后发现无法选中切屏等操作, 不如就写个脚本解除这些限制吧, 马上我同学魔改其他人的脚本加入了翻译等功能, 我就想着不如我也写着试一试吧, 随后就开始了我与ITEST的拉锯战</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874839871.png" class="" width="1708874839871"><h2 id="0x1-1-0版本-–-解除限制"><a href="#0x1-1-0版本-–-解除限制" class="headerlink" title="0x1 1.0版本 – 解除限制"></a>0x1 1.0版本 – 解除限制</h2><h3 id="我方进攻"><a href="#我方进攻" class="headerlink" title="我方进攻"></a>我方进攻</h3><p>解除限制非常简单, 首先注意到所有的 <code>.itest-ques</code>均被挂上了false, <code>document</code> <code>document.body</code>也被限制了, 直接解除这些限制即可</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875106682.png" class="" width="1708875106682"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hackClass</span>(<span class="hljs-params">className</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(className)) &#123;<br>        <span class="hljs-title function_">hackItem</span>(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 现在会被检测</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hackItem</span>(<span class="hljs-params">item</span>) &#123;<br>    item.<span class="hljs-property">onpaste</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">onselectstart</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">ondragstart</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">oncopy</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">onbeforecopy</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">style</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><span class="hljs-title function_">hackClass</span>(<span class="hljs-string">&#x27;itest-ques&#x27;</span>);<br><span class="hljs-title function_">hackClass</span>(<span class="hljs-string">&#x27;itest-direction&#x27;</span>);<br><span class="hljs-title function_">hackItem</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br></code></pre></td></tr></table></figure><h2 id="0x2-2-0版本-自动翻译与解析听力"><a href="#0x2-2-0版本-自动翻译与解析听力" class="headerlink" title="0x2 2.0版本 - 自动翻译与解析听力"></a>0x2 2.0版本 - 自动翻译与解析听力</h2><h3 id="我方进攻-1"><a href="#我方进攻-1" class="headerlink" title="我方进攻"></a>我方进攻</h3><p>注意到所有的听力材料都是以json的形式写在了dom里, 只需要遍历这些dom, 就可以将听力的地址提取出来 ~~ITEST开发人员太懒了</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874877517.png" class="" width="1708874877517"><p>翻译题目很简单, 只需要遍历每个题目的节点, 在每个题目上加上按钮, 传入百度翻译即可返回结果, 这里贴上部分代码~~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用翻译api</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">context_list</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">from</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">to</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;unknown&gt;</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">translateAPI</span>(<span class="hljs-params">context_list, <span class="hljs-keyword">from</span>, to</span>) &#123;<br>    <span class="hljs-keyword">const</span> trans_salt = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">const</span> &#123;appid, key&#125; = <span class="hljs-title function_">getBaiduAPIKey</span>()<br>    <span class="hljs-keyword">const</span> trans_str = appid + context_list + trans_salt + key;<br>    <span class="hljs-keyword">const</span> trans_sign = <span class="hljs-title function_">md5</span>(trans_str);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">translateAjaxApi</span>(&#123;<br>            <span class="hljs-attr">q</span>: context_list,<br>            <span class="hljs-keyword">from</span>,<br>            to,<br>            <span class="hljs-attr">appid</span>: appid,<br>            <span class="hljs-attr">salt</span>: trans_salt,<br>            <span class="hljs-attr">sign</span>: trans_sign<br>        &#125;)<br>        <span class="hljs-keyword">if</span> (data.<span class="hljs-property">error_code</span>) &#123;<br>            <span class="hljs-keyword">const</span> errmsg = &#123;<br>                <span class="hljs-string">&quot;52001&quot;</span>: <span class="hljs-string">&quot;请求超时&quot;</span>,<br>                <span class="hljs-string">&quot;52002&quot;</span>: <span class="hljs-string">&quot;系统错误&quot;</span>,<br>                <span class="hljs-string">&quot;52003&quot;</span>: <span class="hljs-string">&quot;未授权用户&quot;</span>,<br>                <span class="hljs-string">&quot;54003&quot;</span>: <span class="hljs-string">&quot;访问频率受限&quot;</span>,<br>                <span class="hljs-string">&quot;54004&quot;</span>: <span class="hljs-string">&quot;账户余额不足&quot;</span>,<br>                <span class="hljs-string">&quot;58002&quot;</span>: <span class="hljs-string">&quot;服务当前已关闭&quot;</span>,<br>                <span class="hljs-string">&quot;90107&quot;</span>: <span class="hljs-string">&quot;认证未通过或未生效&quot;</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">parseInt</span>(data.<span class="hljs-property">error_code</span>) !== <span class="hljs-number">54003</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">`错误代码<span class="hljs-subst">$&#123;data.error_code&#125;</span> 信息:<span class="hljs-subst">$&#123;errmsg[data.error_code.toString()]&#125;</span>`</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`错误代码<span class="hljs-subst">$&#123;data.error_code&#125;</span> 信息:<span class="hljs-subst">$&#123;errmsg[data.error_code.toString()]&#125;</span>`</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> data.<span class="hljs-property">trans_result</span>;<br>    &#125;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请求过于频繁&quot;</span>)<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;请求过于频繁&quot;</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单选题注入</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">singleSelect</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&#x27;.row&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.option&#x27;</span>).<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>) &#123;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prepend</span>(<span class="hljs-string">`&lt;button class=&quot;sk-tr-s sk-translate-btn sk-btn-primary sk-btn-p&quot;&gt;翻译&lt;/button&gt;`</span>)<br>        &#125;<br>    &#125;)<br>    $(<span class="hljs-string">&#x27;.sk-tr-s&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;.sk-btn-p&#x27;</span>)) &#123;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>();<br>            &#125;)<br>            <span class="hljs-keyword">const</span> $this = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>();<br>            <span class="hljs-keyword">const</span> selectOption = [];<br>            $this.<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;.option&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                selectOption.<span class="hljs-title function_">push</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;label&#x27;</span>))<br>            &#125;)<br>            <span class="hljs-keyword">const</span> p = selectOption.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value.<span class="hljs-title function_">text</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>            <span class="hljs-title function_">translateAPI</span>(p, <span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;zh&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; value.<span class="hljs-property">length</span>; i++) &#123;<br>                    selectOption[i].<span class="hljs-title function_">append</span>(<span class="hljs-string">`&lt;span style=&quot;color: #5093df&quot;&gt;&lt;br/&gt;     <span class="hljs-subst">$&#123;value[i].dst&#125;</span>&lt;/span&gt;`</span>)<br>                &#125;<br>                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;sk-btn-p&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;sk-btn-g&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;清空&#x27;</span>);<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;sk-btn-g&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;sk-btn-p&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;翻译&#x27;</span>);<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>();<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ITEST方防御"><a href="#ITEST方防御" class="headerlink" title="ITEST方防御"></a>ITEST方防御</h3><p>因为不少学校的ITEST平台是定制的, 域名未知, 我不得不匹配所有域名, 为了判断一个平台是否为ITEST, 我才用了判断标题的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为Itest平台, 为了防止部分学校定制</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isItest</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;iTEST&quot;</span>) !== -<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;all-content&#x27;</span>) !== <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>收到失效的报告后, 我进入平台检查, 发现了下面令我瞠目结舌的场面:</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874924792.png" class="" width="1708874924792"><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874934244.png" class="" width="1708874934244"><p>他们把ITEST的 <code>T</code>与 <code>E</code>替换成了希腊字母 <code>Εε</code>和 <code>Ττ</code>, 肉眼看不出任何问题, 但是程序不认了, 要不是有拼写检查, 我还真看不出来 <code>ITEST</code>和 <code>ITΕSΤ</code>不一样, 你看得出来吗?</p><h2 id="0x3-3-0版本-–-解除切屏限制与添加翻译助手"><a href="#0x3-3-0版本-–-解除切屏限制与添加翻译助手" class="headerlink" title="0x3 3.0版本 – 解除切屏限制与添加翻译助手"></a>0x3 3.0版本 – 解除切屏限制与添加翻译助手</h2><h3 id="反制防御"><a href="#反制防御" class="headerlink" title="反制防御"></a>反制防御</h3><p>因为ITEST被改, 不能判断ITEST, 我将条件删为仅判断节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isItest</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;all-content&#x27;</span>) !== <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="我方进攻-2"><a href="#我方进攻-2" class="headerlink" title="我方进攻"></a>我方进攻</h3><p>在逻辑里发现切屏代码, 是通过 <code>window.onblur</code>与 <code>window.onfocus</code>检测切屏, 很简单, 我只要把这两个函数置空即可</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874946371.png" class="" width="1708874946371"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onblur</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onfocus</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br>&#125;, <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>为了方便查单词, 我添加了翻译助手, 大概就是添加了个节点,  点击会直接调用百度翻译进行翻译, 大致源码, <strong>红框内为铺垫</strong></p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874956429.png" class="" width="1708874956429"><h3 id="ITEST防御"><a href="#ITEST防御" class="headerlink" title="ITEST防御"></a>ITEST防御</h3><p>还记得前面那个翻译助手吗? 就那里出现了大问题, ITEST直接检测了翻译助手的悬浮窗, 如何出现问题直接判定为作弊, 并通过ajax传输出去! 至此, 我不得不修改源码</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875132004.png" class="" width="1708875132004"><h2 id="0x4-4-0版本-全随机与ajax拦截"><a href="#0x4-4-0版本-全随机与ajax拦截" class="headerlink" title="0x4 4.0版本 - 全随机与ajax拦截"></a>0x4 4.0版本 - 全随机与ajax拦截</h2><h3 id="反制防御-1"><a href="#反制防御-1" class="headerlink" title="反制防御"></a>反制防御</h3><p>为了防止脚本被固定节点检测出, 我决定对脚本进行重构, 对所有的class进行随机化处理, 核心代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成随机字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> len 长度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomString</span>(<span class="hljs-params">len = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    <span class="hljs-keyword">const</span> maxPos = str.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> pwd = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        pwd += str.<span class="hljs-title function_">charAt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * maxPos));<br>    &#125;<br>    <span class="hljs-keyword">return</span> pwd;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成范围随机数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minNum 最小值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maxNum 最大值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomInt</span>(<span class="hljs-params">minNum, maxNum</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (maxNum - minNum + <span class="hljs-number">1</span>) + minNum, <span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RANDOM_CLASS</span> = &#123;  <span class="hljs-comment">// 对所有的随机化处理</span><br>    <span class="hljs-attr">BTN</span>: <span class="hljs-title function_">getRandomString</span>(<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)),<br>    <span class="hljs-attr">BTN_P</span>: <span class="hljs-title function_">getRandomString</span>(<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)),<br>    <span class="hljs-attr">BTN_G</span>: <span class="hljs-title function_">getRandomString</span>(<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)),<br>    <span class="hljs-attr">TRANSLATE_TEXT</span>: <span class="hljs-title function_">getRandomString</span>(<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)),<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文章翻译</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">article</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ART</span> = <span class="hljs-title function_">getRandomString</span>(<span class="hljs-title function_">getRandomInt</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>));<br>    $(<span class="hljs-string">&#x27;.con-left&gt;.article&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prepend</span>(<span class="hljs-string">`&lt;a class=&quot;<span class="hljs-subst">$&#123;RANDOM_CLASS.BTN&#125;</span> <span class="hljs-subst">$&#123;RANDOM_CLASS.BTN_P&#125;</span> <span class="hljs-subst">$&#123;ART&#125;</span>&quot; &gt;<span class="hljs-subst">$&#123;getRandomString(<span class="hljs-number">4</span>)&#125;</span>&lt;/a&gt;`</span>)<br>    &#125;)<br>    $(<span class="hljs-string">`.<span class="hljs-subst">$&#123;ART&#125;</span>`</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 翻译被点击内容</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>如此一来, 所有动态插入的内容全随机, 如图</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874979501.png" class="" width="1708874988650"><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708874988650.png" class="" width="1708874988650"><h3 id="我方进攻-3"><a href="#我方进攻-3" class="headerlink" title="我方进攻"></a>我方进攻</h3><p>为了防止信息被上报, 我拦截了ajax信息, 对url进行判断, 并选择是否放行, 代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fuckITEST</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 一袋米要抗几楼</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>    &#125;, <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>)<br><br>    <span class="hljs-comment">// 一袋米要抗二楼</span><br>    <span class="hljs-keyword">const</span> ajax = $.ajax<br>    $.ajax = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-keyword">const</span> url = obj.<span class="hljs-property">url</span><br>        <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;log&quot;</span>) === -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">ajax</span>(obj)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欧拉欧拉欧拉欧拉&quot;</span><br>    &#125;<br>    <span class="hljs-comment">// 一袋米哟给多嘞</span><br>    <span class="hljs-variable constant_">ITEST</span>.<span class="hljs-property">util</span>.<span class="hljs-property">logNew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 木大木大木大木大木大木大</span><br>    &#125;;<br>    <span class="hljs-comment">// 一袋米哟我洗嘞 !!!!!!</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ITEST防御-1"><a href="#ITEST防御-1" class="headerlink" title="ITEST防御"></a>ITEST防御</h3><p>这次防御有点头疼, 首先ITEST去检测了<strong>解除限制</strong>这一片, 发现如果被置为 <code>true</code>则判定开了脚本</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875017530.png" class="" width="1708875017530"><p>为了防止ajax被拦截, 他们选择了 <code>fetch</code>, 并提前保存了fetch防止被篡改</p><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875028997.png" class="" width="1708875028997"><p>最后拦截了ajax, 并采用定时器不断修改ajax, 检测是否访问 <code>api.fanyi.baidu.com</code><br> <img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875042338.png" class="" width="1708875042338"></p><h2 id="0x5-5-0版本-只读属性的胜利"><a href="#0x5-5-0版本-只读属性的胜利" class="headerlink" title="0x5 5.0版本 - 只读属性的胜利"></a>0x5 5.0版本 - 只读属性的胜利</h2><h3 id="反制防御-2"><a href="#反制防御-2" class="headerlink" title="反制防御"></a>反制防御</h3><p>iTEST再次更改了节点, 从 <code>all-content</code>改成了 <code>main-content</code>, 必须得找一个无法被修改的办法, 于是选择检测JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isITEST</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-variable constant_">ITEST</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为检测 <code>oncontextmenu</code>, 只要不返回 <code>false</code>便可解除屏蔽, 为了万无一失, 我采用了骚操作, 采用定义属性的方式使其返回false, 但是网页却认为不是false, 右键菜单照常, 但是js读一定是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hackItem</span>(<span class="hljs-params">item</span>) &#123;<br>    item.<span class="hljs-property">onpaste</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">onselectstart</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">ondragstart</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">oncopy</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    item.<span class="hljs-property">onbeforecopy</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(item, <span class="hljs-string">&#x27;onpaste&#x27;</span>, &#123;<span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-literal">false</span>&#125;)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(item, <span class="hljs-string">&#x27;oncontextmenu&#x27;</span>, &#123;<span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-literal">false</span>&#125;)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(item, <span class="hljs-string">&#x27;onselectstart&#x27;</span>, &#123;<span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-literal">false</span>&#125;)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(item, <span class="hljs-string">&#x27;ondragstart&#x27;</span>, &#123;<span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-literal">false</span>&#125;)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(item, <span class="hljs-string">&#x27;oncopy&#x27;</span>, &#123;<span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-literal">false</span>&#125;)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(item, <span class="hljs-string">&#x27;onbeforecopy&#x27;</span>, &#123;<span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-literal">false</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875062086.png" class="" width="1708875062086"><p>因为对方拦截了ajax, 我要不想被拦截就可以使脚本比他更先运行, 加入注释头<br><code>// @run-at       document-body</code><br>因为此时网页还未载入jQuery, 我得自己加载jQuery<br><code>// @require      https://cdn.bootcdn.net/ajax/libs/jquery/1.11.1/jquery.min.js</code><br> 随后保存ajax, 使其无法篡改<br> <img src="/2020/07/01/unipus-iTEST%E8%80%83%E8%AF%95%E5%8A%A9%E6%89%8B-%E5%86%99%E8%84%9A%E6%9C%AC%E4%B8%8E%E5%8F%8D%E8%84%9A%E6%9C%AC%E7%9A%84%E6%8B%89%E9%94%AF%E6%88%98/1708875073167.png" class="" width="1708875073167"><br> 这样以后调用ajax即可, 对方无法侦测到我使用翻译接口</p><h3 id="我方进攻-4"><a href="#我方进攻-4" class="headerlink" title="我方进攻"></a>我方进攻</h3><p>虽然我承认ajax是我先改的, 但是我现在脚本比你先运行, 那么就可以玩点骚的了, 首先把ajax设为只读, 并采用白名单得形势去检查上报事件是否是我允许的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>($, <span class="hljs-string">&#x27;ajax&#x27;</span>, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(obj.<span class="hljs-property">data</span>)<br>        <span class="hljs-keyword">const</span> allow = data.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> action = value.<span class="hljs-property">action</span><br>            <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;pairwork_exam&#x27;</span>, <span class="hljs-string">&#x27;res_download_start&#x27;</span>, <span class="hljs-string">&#x27;next_ques_click&#x27;</span>, <span class="hljs-string">&#x27;pre_ques_click&#x27;</span>,<br>                <span class="hljs-string">&#x27;ans_submit&#x27;</span>, <span class="hljs-string">&#x27;exam_end&#x27;</span>, <span class="hljs-string">&#x27;ans_card_click&#x27;</span>, <span class="hljs-string">&#x27;ans_auto_submit&#x27;</span>, <span class="hljs-string">&#x27;exam_begin&#x27;</span>, <span class="hljs-string">&#x27;res_download_end&#x27;</span>,<br>                <span class="hljs-string">&#x27;down_audio_error&#x27;</span>].<span class="hljs-title function_">includes</span>(action);<br>        &#125;)<br>        <span class="hljs-keyword">if</span> (allow.<span class="hljs-property">length</span> === <span class="hljs-number">1</span> &amp;&amp; data.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;上报信息成功&quot;</span>)<br>            <span class="hljs-variable constant_">SETTING</span>.<span class="hljs-title function_">AJAX</span>(obj)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;上报信息不在白名单内, 已被阻断!&quot;</span>)<br>            obj.<span class="hljs-title function_">success</span>()<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;无事发生&quot;</span>)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>随后拦截 <code>fetch</code>事件, 使其返回永远是成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">fetch</span> = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<span class="hljs-title function_">resolve</span>()&#125;)<br>fetch = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<span class="hljs-title function_">resolve</span>()&#125;)<br></code></pre></td></tr></table></figure><h2 id="0x6-后记"><a href="#0x6-后记" class="headerlink" title="0x6 后记"></a>0x6 后记</h2><p>拉锯战到这里就结束了, 因为5.0版本我并没有公开, ITEST无法对我进行反制, 等这篇博客发出来的时候, 我的英语应该已经考完了(滑稽), 不过5.0我也不打算公开了, 通过这次拉锯战巩固了我jQuery框架的知识, 还整会了各种骚操作, <strong>这种东西玩玩就好了, 适时收手, 我可不想收到我的第二封律师函</strong></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
